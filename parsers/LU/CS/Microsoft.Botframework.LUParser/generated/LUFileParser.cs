//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\LUFileParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class LUFileParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, NEWLINE=2, QNA_SOURCE_INFO=3, MODEL_INFO=4, COMMENT=5, QNA=6, HASH=7, 
		DASH=8, DOLLAR=9, AT=10, IMPORT=11, FILTER_MARK=12, QNA_ID_MARK=13, MULTI_LINE_TEXT=14, 
		PROMPT_MARK=15, INVALID_TOKEN_DEFAULT_MODE=16, EQUAL=17, COMMA=18, HAS_ROLES_LABEL=19, 
		HAS_FEATURES_LABEL=20, NEW_ENTITY_TYPE_IDENTIFIER=21, PHRASE_LIST_LABEL=22, 
		NEW_COMPOSITE_ENTITY=23, NEW_REGEX_ENTITY=24, NEW_ENTITY_IDENTIFIER=25, 
		NEW_ENTITY_IDENTIFIER_WITH_WS=26, NEWLINE_IN_NAME=27, IDENTIFIER=28, DOT=29, 
		ESCAPE_CHARACTER=30, EXPRESSION=31, TEXT=32, NEWLINE_IN_ENTITY=33, COMPOSITE_ENTITY=34, 
		REGEX_ENTITY=35, ENTITY_TEXT=36, COLON_MARK=37, NEWLINE_IN_QNA=38, QNA_TEXT=39;
	public const int
		RULE_file = 0, RULE_paragraph = 1, RULE_newline = 2, RULE_errorString = 3, 
		RULE_nestedIntentSection = 4, RULE_nestedIntentNameLine = 5, RULE_nestedIntentName = 6, 
		RULE_nameIdentifier = 7, RULE_nestedIntentBodyDefinition = 8, RULE_subIntentDefinition = 9, 
		RULE_simpleIntentSection = 10, RULE_intentDefinition = 11, RULE_intentNameLine = 12, 
		RULE_intentName = 13, RULE_intentBody = 14, RULE_normalIntentBody = 15, 
		RULE_normalIntentString = 16, RULE_newEntitySection = 17, RULE_newEntityDefinition = 18, 
		RULE_newEntityListbody = 19, RULE_newEntityLine = 20, RULE_newCompositeDefinition = 21, 
		RULE_newRegexDefinition = 22, RULE_newEntityType = 23, RULE_newEntityRoles = 24, 
		RULE_newEntityUsesFeatures = 25, RULE_newEntityRoleOrFeatures = 26, RULE_newEntityName = 27, 
		RULE_newEntityNameWithWS = 28, RULE_entitySection = 29, RULE_entityDefinition = 30, 
		RULE_entityLine = 31, RULE_entityName = 32, RULE_entityType = 33, RULE_compositeEntityIdentifier = 34, 
		RULE_regexEntityIdentifier = 35, RULE_entityListBody = 36, RULE_normalItemString = 37, 
		RULE_importSection = 38, RULE_importDefinition = 39, RULE_qnaSection = 40, 
		RULE_qnaDefinition = 41, RULE_qnaSourceInfo = 42, RULE_qnaIdMark = 43, 
		RULE_qnaQuestion = 44, RULE_questionText = 45, RULE_moreQuestionsBody = 46, 
		RULE_moreQuestion = 47, RULE_errorQuestionString = 48, RULE_qnaAnswerBody = 49, 
		RULE_filterSection = 50, RULE_promptSection = 51, RULE_filterLine = 52, 
		RULE_errorFilterLine = 53, RULE_multiLineAnswer = 54, RULE_modelInfoSection = 55, 
		RULE_modelInfoDefinition = 56;
	public static readonly string[] ruleNames = {
		"file", "paragraph", "newline", "errorString", "nestedIntentSection", 
		"nestedIntentNameLine", "nestedIntentName", "nameIdentifier", "nestedIntentBodyDefinition", 
		"subIntentDefinition", "simpleIntentSection", "intentDefinition", "intentNameLine", 
		"intentName", "intentBody", "normalIntentBody", "normalIntentString", 
		"newEntitySection", "newEntityDefinition", "newEntityListbody", "newEntityLine", 
		"newCompositeDefinition", "newRegexDefinition", "newEntityType", "newEntityRoles", 
		"newEntityUsesFeatures", "newEntityRoleOrFeatures", "newEntityName", "newEntityNameWithWS", 
		"entitySection", "entityDefinition", "entityLine", "entityName", "entityType", 
		"compositeEntityIdentifier", "regexEntityIdentifier", "entityListBody", 
		"normalItemString", "importSection", "importDefinition", "qnaSection", 
		"qnaDefinition", "qnaSourceInfo", "qnaIdMark", "qnaQuestion", "questionText", 
		"moreQuestionsBody", "moreQuestion", "errorQuestionString", "qnaAnswerBody", 
		"filterSection", "promptSection", "filterLine", "errorFilterLine", "multiLineAnswer", 
		"modelInfoSection", "modelInfoDefinition"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, "'$'", "'@'", null, 
		null, null, null, null, null, "'='", "','", null, null, null, null, null, 
		null, null, null, null, null, "'.'", null, null, null, null, null, null, 
		null, "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "NEWLINE", "QNA_SOURCE_INFO", "MODEL_INFO", "COMMENT", "QNA", 
		"HASH", "DASH", "DOLLAR", "AT", "IMPORT", "FILTER_MARK", "QNA_ID_MARK", 
		"MULTI_LINE_TEXT", "PROMPT_MARK", "INVALID_TOKEN_DEFAULT_MODE", "EQUAL", 
		"COMMA", "HAS_ROLES_LABEL", "HAS_FEATURES_LABEL", "NEW_ENTITY_TYPE_IDENTIFIER", 
		"PHRASE_LIST_LABEL", "NEW_COMPOSITE_ENTITY", "NEW_REGEX_ENTITY", "NEW_ENTITY_IDENTIFIER", 
		"NEW_ENTITY_IDENTIFIER_WITH_WS", "NEWLINE_IN_NAME", "IDENTIFIER", "DOT", 
		"ESCAPE_CHARACTER", "EXPRESSION", "TEXT", "NEWLINE_IN_ENTITY", "COMPOSITE_ENTITY", 
		"REGEX_ENTITY", "ENTITY_TEXT", "COLON_MARK", "NEWLINE_IN_QNA", "QNA_TEXT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LUFileParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static LUFileParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LUFileParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LUFileParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(LUFileParser.Eof, 0); }
		public ParagraphContext[] paragraph() {
			return GetRuleContexts<ParagraphContext>();
		}
		public ParagraphContext paragraph(int i) {
			return GetRuleContext<ParagraphContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 114; paragraph();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 117;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 119; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParagraphContext : ParserRuleContext {
		public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		public NestedIntentSectionContext nestedIntentSection() {
			return GetRuleContext<NestedIntentSectionContext>(0);
		}
		public SimpleIntentSectionContext simpleIntentSection() {
			return GetRuleContext<SimpleIntentSectionContext>(0);
		}
		public EntitySectionContext entitySection() {
			return GetRuleContext<EntitySectionContext>(0);
		}
		public NewEntitySectionContext newEntitySection() {
			return GetRuleContext<NewEntitySectionContext>(0);
		}
		public ImportSectionContext importSection() {
			return GetRuleContext<ImportSectionContext>(0);
		}
		public QnaSectionContext qnaSection() {
			return GetRuleContext<QnaSectionContext>(0);
		}
		public ModelInfoSectionContext modelInfoSection() {
			return GetRuleContext<ModelInfoSectionContext>(0);
		}
		public ParagraphContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paragraph; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterParagraph(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitParagraph(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParagraph(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParagraphContext paragraph() {
		ParagraphContext _localctx = new ParagraphContext(Context, State);
		EnterRule(_localctx, 2, RULE_paragraph);
		try {
			State = 129;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 121; newline();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 122; nestedIntentSection();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 123; simpleIntentSection();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 124; entitySection();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 125; newEntitySection();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 126; importSection();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 127; qnaSection();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 128; modelInfoSection();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewlineContext : ParserRuleContext {
		public ITerminalNode NEWLINE() { return GetToken(LUFileParser.NEWLINE, 0); }
		public ITerminalNode Eof() { return GetToken(LUFileParser.Eof, 0); }
		public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public NewlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newline; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewline(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewline(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewlineContext newline() {
		NewlineContext _localctx = new NewlineContext(Context, State);
		EnterRule(_localctx, 4, RULE_newline);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 131; Match(WS);
				}
				}
				State = 136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 137;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==NEWLINE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorStringContext : ParserRuleContext {
		public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public ITerminalNode[] INVALID_TOKEN_DEFAULT_MODE() { return GetTokens(LUFileParser.INVALID_TOKEN_DEFAULT_MODE); }
		public ITerminalNode INVALID_TOKEN_DEFAULT_MODE(int i) {
			return GetToken(LUFileParser.INVALID_TOKEN_DEFAULT_MODE, i);
		}
		public ErrorStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorString; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterErrorString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitErrorString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorStringContext errorString() {
		ErrorStringContext _localctx = new ErrorStringContext(Context, State);
		EnterRule(_localctx, 6, RULE_errorString);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 139;
					_la = TokenStream.LA(1);
					if ( !(_la==WS || _la==INVALID_TOKEN_DEFAULT_MODE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 142;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedIntentSectionContext : ParserRuleContext {
		public NestedIntentNameLineContext nestedIntentNameLine() {
			return GetRuleContext<NestedIntentNameLineContext>(0);
		}
		public NestedIntentBodyDefinitionContext nestedIntentBodyDefinition() {
			return GetRuleContext<NestedIntentBodyDefinitionContext>(0);
		}
		public NestedIntentSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedIntentSection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNestedIntentSection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNestedIntentSection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedIntentSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedIntentSectionContext nestedIntentSection() {
		NestedIntentSectionContext _localctx = new NestedIntentSectionContext(Context, State);
		EnterRule(_localctx, 8, RULE_nestedIntentSection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; nestedIntentNameLine();
			State = 145; nestedIntentBodyDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedIntentNameLineContext : ParserRuleContext {
		public ITerminalNode HASH() { return GetToken(LUFileParser.HASH, 0); }
		public NestedIntentNameContext nestedIntentName() {
			return GetRuleContext<NestedIntentNameContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public NestedIntentNameLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedIntentNameLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNestedIntentNameLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNestedIntentNameLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedIntentNameLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedIntentNameLineContext nestedIntentNameLine() {
		NestedIntentNameLineContext _localctx = new NestedIntentNameLineContext(Context, State);
		EnterRule(_localctx, 10, RULE_nestedIntentNameLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 147; Match(WS);
				}
				}
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 153; Match(HASH);
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 154; Match(WS);
				}
				}
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 160; nestedIntentName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedIntentNameContext : ParserRuleContext {
		public NameIdentifierContext[] nameIdentifier() {
			return GetRuleContexts<NameIdentifierContext>();
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return GetRuleContext<NameIdentifierContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public NestedIntentNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedIntentName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNestedIntentName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNestedIntentName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedIntentName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedIntentNameContext nestedIntentName() {
		NestedIntentNameContext _localctx = new NestedIntentNameContext(Context, State);
		EnterRule(_localctx, 12, RULE_nestedIntentName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; nameIdentifier();
			State = 167;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 165;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case WS:
						{
						State = 163; Match(WS);
						}
						break;
					case IDENTIFIER:
						{
						State = 164; nameIdentifier();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 169;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameIdentifierContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(LUFileParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LUFileParser.IDENTIFIER, i);
		}
		public ITerminalNode[] DOT() { return GetTokens(LUFileParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(LUFileParser.DOT, i);
		}
		public NameIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNameIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNameIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameIdentifierContext nameIdentifier() {
		NameIdentifierContext _localctx = new NameIdentifierContext(Context, State);
		EnterRule(_localctx, 14, RULE_nameIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170; Match(IDENTIFIER);
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 171; Match(DOT);
				State = 172; Match(IDENTIFIER);
				}
				}
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedIntentBodyDefinitionContext : ParserRuleContext {
		public SubIntentDefinitionContext[] subIntentDefinition() {
			return GetRuleContexts<SubIntentDefinitionContext>();
		}
		public SubIntentDefinitionContext subIntentDefinition(int i) {
			return GetRuleContext<SubIntentDefinitionContext>(i);
		}
		public NestedIntentBodyDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedIntentBodyDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNestedIntentBodyDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNestedIntentBodyDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedIntentBodyDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedIntentBodyDefinitionContext nestedIntentBodyDefinition() {
		NestedIntentBodyDefinitionContext _localctx = new NestedIntentBodyDefinitionContext(Context, State);
		EnterRule(_localctx, 16, RULE_nestedIntentBodyDefinition);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 178; subIntentDefinition();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 181;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubIntentDefinitionContext : ParserRuleContext {
		public ITerminalNode HASH() { return GetToken(LUFileParser.HASH, 0); }
		public SimpleIntentSectionContext simpleIntentSection() {
			return GetRuleContext<SimpleIntentSectionContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public SubIntentDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subIntentDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterSubIntentDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitSubIntentDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubIntentDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubIntentDefinitionContext subIntentDefinition() {
		SubIntentDefinitionContext _localctx = new SubIntentDefinitionContext(Context, State);
		EnterRule(_localctx, 18, RULE_subIntentDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 183; Match(WS);
				}
				}
				State = 188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 189; Match(HASH);
			State = 190; simpleIntentSection();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleIntentSectionContext : ParserRuleContext {
		public IntentDefinitionContext intentDefinition() {
			return GetRuleContext<IntentDefinitionContext>(0);
		}
		public SimpleIntentSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleIntentSection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterSimpleIntentSection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitSimpleIntentSection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleIntentSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleIntentSectionContext simpleIntentSection() {
		SimpleIntentSectionContext _localctx = new SimpleIntentSectionContext(Context, State);
		EnterRule(_localctx, 20, RULE_simpleIntentSection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192; intentDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntentDefinitionContext : ParserRuleContext {
		public IntentNameLineContext intentNameLine() {
			return GetRuleContext<IntentNameLineContext>(0);
		}
		public IntentBodyContext intentBody() {
			return GetRuleContext<IntentBodyContext>(0);
		}
		public IntentDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intentDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterIntentDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitIntentDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntentDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntentDefinitionContext intentDefinition() {
		IntentDefinitionContext _localctx = new IntentDefinitionContext(Context, State);
		EnterRule(_localctx, 22, RULE_intentDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194; intentNameLine();
			State = 196;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 195; intentBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntentNameLineContext : ParserRuleContext {
		public ITerminalNode[] HASH() { return GetTokens(LUFileParser.HASH); }
		public ITerminalNode HASH(int i) {
			return GetToken(LUFileParser.HASH, i);
		}
		public IntentNameContext intentName() {
			return GetRuleContext<IntentNameContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public IntentNameLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intentNameLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterIntentNameLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitIntentNameLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntentNameLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntentNameLineContext intentNameLine() {
		IntentNameLineContext _localctx = new IntentNameLineContext(Context, State);
		EnterRule(_localctx, 24, RULE_intentNameLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 198; Match(WS);
				}
				}
				State = 203;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 204; Match(HASH);
			State = 206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HASH) {
				{
				State = 205; Match(HASH);
				}
			}

			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 208; Match(WS);
				}
				}
				State = 213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 214; intentName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntentNameContext : ParserRuleContext {
		public NameIdentifierContext[] nameIdentifier() {
			return GetRuleContexts<NameIdentifierContext>();
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return GetRuleContext<NameIdentifierContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public IntentNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intentName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterIntentName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitIntentName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntentName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntentNameContext intentName() {
		IntentNameContext _localctx = new IntentNameContext(Context, State);
		EnterRule(_localctx, 26, RULE_intentName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 216; nameIdentifier();
			State = 221;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 219;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case WS:
						{
						State = 217; Match(WS);
						}
						break;
					case IDENTIFIER:
						{
						State = 218; nameIdentifier();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 223;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntentBodyContext : ParserRuleContext {
		public NormalIntentBodyContext normalIntentBody() {
			return GetRuleContext<NormalIntentBodyContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public IntentBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intentBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterIntentBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitIntentBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntentBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntentBodyContext intentBody() {
		IntentBodyContext _localctx = new IntentBodyContext(Context, State);
		EnterRule(_localctx, 28, RULE_intentBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 224; Match(WS);
					}
					} 
				}
				State = 229;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			State = 230; normalIntentBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalIntentBodyContext : ParserRuleContext {
		public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public ErrorStringContext[] errorString() {
			return GetRuleContexts<ErrorStringContext>();
		}
		public ErrorStringContext errorString(int i) {
			return GetRuleContext<ErrorStringContext>(i);
		}
		public NormalIntentStringContext[] normalIntentString() {
			return GetRuleContexts<NormalIntentStringContext>();
		}
		public NormalIntentStringContext normalIntentString(int i) {
			return GetRuleContext<NormalIntentStringContext>(i);
		}
		public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public NormalIntentBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalIntentBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNormalIntentBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNormalIntentBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalIntentBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NormalIntentBodyContext normalIntentBody() {
		NormalIntentBodyContext _localctx = new NormalIntentBodyContext(Context, State);
		EnterRule(_localctx, 30, RULE_normalIntentBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 232; Match(WS);
					}
					} 
				}
				State = 237;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			State = 242;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 242;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
					case 1:
						{
						{
						State = 238; normalIntentString();
						State = 239; newline();
						}
						}
						break;
					case 2:
						{
						State = 241; errorString();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 244;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalIntentStringContext : ParserRuleContext {
		public ITerminalNode DASH() { return GetToken(LUFileParser.DASH, 0); }
		public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public ITerminalNode[] TEXT() { return GetTokens(LUFileParser.TEXT); }
		public ITerminalNode TEXT(int i) {
			return GetToken(LUFileParser.TEXT, i);
		}
		public ITerminalNode[] EXPRESSION() { return GetTokens(LUFileParser.EXPRESSION); }
		public ITerminalNode EXPRESSION(int i) {
			return GetToken(LUFileParser.EXPRESSION, i);
		}
		public ITerminalNode[] ESCAPE_CHARACTER() { return GetTokens(LUFileParser.ESCAPE_CHARACTER); }
		public ITerminalNode ESCAPE_CHARACTER(int i) {
			return GetToken(LUFileParser.ESCAPE_CHARACTER, i);
		}
		public NormalIntentStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalIntentString; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNormalIntentString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNormalIntentString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalIntentString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NormalIntentStringContext normalIntentString() {
		NormalIntentStringContext _localctx = new NormalIntentStringContext(Context, State);
		EnterRule(_localctx, 32, RULE_normalIntentString);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 246; Match(WS);
				}
				}
				State = 251;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 252; Match(DASH);
			State = 256;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 253;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WS) | (1L << ESCAPE_CHARACTER) | (1L << EXPRESSION) | (1L << TEXT))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 258;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewEntitySectionContext : ParserRuleContext {
		public NewEntityDefinitionContext newEntityDefinition() {
			return GetRuleContext<NewEntityDefinitionContext>(0);
		}
		public NewEntitySectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newEntitySection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewEntitySection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewEntitySection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewEntitySection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewEntitySectionContext newEntitySection() {
		NewEntitySectionContext _localctx = new NewEntitySectionContext(Context, State);
		EnterRule(_localctx, 34, RULE_newEntitySection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259; newEntityDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewEntityDefinitionContext : ParserRuleContext {
		public NewEntityLineContext newEntityLine() {
			return GetRuleContext<NewEntityLineContext>(0);
		}
		public NewEntityListbodyContext newEntityListbody() {
			return GetRuleContext<NewEntityListbodyContext>(0);
		}
		public NewEntityDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newEntityDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewEntityDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewEntityDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewEntityDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewEntityDefinitionContext newEntityDefinition() {
		NewEntityDefinitionContext _localctx = new NewEntityDefinitionContext(Context, State);
		EnterRule(_localctx, 36, RULE_newEntityDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261; newEntityLine();
			State = 263;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 262; newEntityListbody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewEntityListbodyContext : ParserRuleContext {
		public ErrorStringContext[] errorString() {
			return GetRuleContexts<ErrorStringContext>();
		}
		public ErrorStringContext errorString(int i) {
			return GetRuleContext<ErrorStringContext>(i);
		}
		public NormalItemStringContext[] normalItemString() {
			return GetRuleContexts<NormalItemStringContext>();
		}
		public NormalItemStringContext normalItemString(int i) {
			return GetRuleContext<NormalItemStringContext>(i);
		}
		public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public NewEntityListbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newEntityListbody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewEntityListbody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewEntityListbody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewEntityListbody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewEntityListbodyContext newEntityListbody() {
		NewEntityListbodyContext _localctx = new NewEntityListbodyContext(Context, State);
		EnterRule(_localctx, 38, RULE_newEntityListbody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 269;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
					case 1:
						{
						{
						State = 265; normalItemString();
						State = 266; newline();
						}
						}
						break;
					case 2:
						{
						State = 268; errorString();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 271;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewEntityLineContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(LUFileParser.AT, 0); }
		public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public NewEntityTypeContext newEntityType() {
			return GetRuleContext<NewEntityTypeContext>(0);
		}
		public NewEntityNameContext newEntityName() {
			return GetRuleContext<NewEntityNameContext>(0);
		}
		public NewEntityNameWithWSContext newEntityNameWithWS() {
			return GetRuleContext<NewEntityNameWithWSContext>(0);
		}
		public NewEntityRolesContext newEntityRoles() {
			return GetRuleContext<NewEntityRolesContext>(0);
		}
		public NewEntityUsesFeaturesContext newEntityUsesFeatures() {
			return GetRuleContext<NewEntityUsesFeaturesContext>(0);
		}
		public ITerminalNode EQUAL() { return GetToken(LUFileParser.EQUAL, 0); }
		public NewCompositeDefinitionContext newCompositeDefinition() {
			return GetRuleContext<NewCompositeDefinitionContext>(0);
		}
		public NewRegexDefinitionContext newRegexDefinition() {
			return GetRuleContext<NewRegexDefinitionContext>(0);
		}
		public NewEntityLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newEntityLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewEntityLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewEntityLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewEntityLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewEntityLineContext newEntityLine() {
		NewEntityLineContext _localctx = new NewEntityLineContext(Context, State);
		EnterRule(_localctx, 40, RULE_newEntityLine);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 273; Match(WS);
				}
				}
				State = 278;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 279; Match(AT);
			State = 283;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 280; Match(WS);
					}
					} 
				}
				State = 285;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			State = 287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEW_ENTITY_TYPE_IDENTIFIER) {
				{
				State = 286; newEntityType();
				}
			}

			State = 292;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 289; Match(WS);
					}
					} 
				}
				State = 294;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			State = 297;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 295; newEntityName();
				}
				break;
			case 2:
				{
				State = 296; newEntityNameWithWS();
				}
				break;
			}
			State = 302;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 299; Match(WS);
					}
					} 
				}
				State = 304;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			State = 306;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 305; newEntityRoles();
				}
				break;
			}
			State = 311;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 308; Match(WS);
					}
					} 
				}
				State = 313;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			State = 315;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HAS_FEATURES_LABEL) {
				{
				State = 314; newEntityUsesFeatures();
				}
			}

			State = 320;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 317; Match(WS);
					}
					} 
				}
				State = 322;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			State = 324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL) {
				{
				State = 323; Match(EQUAL);
				}
			}

			State = 329;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 326; Match(WS);
					}
					} 
				}
				State = 331;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			}
			State = 334;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEW_COMPOSITE_ENTITY:
				{
				State = 332; newCompositeDefinition();
				}
				break;
			case NEW_REGEX_ENTITY:
				{
				State = 333; newRegexDefinition();
				}
				break;
			case Eof:
			case WS:
			case NEWLINE:
				break;
			default:
				break;
			}
			State = 336; newline();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewCompositeDefinitionContext : ParserRuleContext {
		public ITerminalNode NEW_COMPOSITE_ENTITY() { return GetToken(LUFileParser.NEW_COMPOSITE_ENTITY, 0); }
		public NewCompositeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newCompositeDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewCompositeDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewCompositeDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewCompositeDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewCompositeDefinitionContext newCompositeDefinition() {
		NewCompositeDefinitionContext _localctx = new NewCompositeDefinitionContext(Context, State);
		EnterRule(_localctx, 42, RULE_newCompositeDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338; Match(NEW_COMPOSITE_ENTITY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewRegexDefinitionContext : ParserRuleContext {
		public ITerminalNode NEW_REGEX_ENTITY() { return GetToken(LUFileParser.NEW_REGEX_ENTITY, 0); }
		public NewRegexDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newRegexDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewRegexDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewRegexDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewRegexDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewRegexDefinitionContext newRegexDefinition() {
		NewRegexDefinitionContext _localctx = new NewRegexDefinitionContext(Context, State);
		EnterRule(_localctx, 44, RULE_newRegexDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340; Match(NEW_REGEX_ENTITY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewEntityTypeContext : ParserRuleContext {
		public ITerminalNode NEW_ENTITY_TYPE_IDENTIFIER() { return GetToken(LUFileParser.NEW_ENTITY_TYPE_IDENTIFIER, 0); }
		public NewEntityTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newEntityType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewEntityType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewEntityType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewEntityType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewEntityTypeContext newEntityType() {
		NewEntityTypeContext _localctx = new NewEntityTypeContext(Context, State);
		EnterRule(_localctx, 46, RULE_newEntityType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342; Match(NEW_ENTITY_TYPE_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewEntityRolesContext : ParserRuleContext {
		public NewEntityRoleOrFeaturesContext newEntityRoleOrFeatures() {
			return GetRuleContext<NewEntityRoleOrFeaturesContext>(0);
		}
		public ITerminalNode HAS_ROLES_LABEL() { return GetToken(LUFileParser.HAS_ROLES_LABEL, 0); }
		public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public NewEntityRolesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newEntityRoles; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewEntityRoles(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewEntityRoles(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewEntityRoles(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewEntityRolesContext newEntityRoles() {
		NewEntityRolesContext _localctx = new NewEntityRolesContext(Context, State);
		EnterRule(_localctx, 48, RULE_newEntityRoles);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HAS_ROLES_LABEL) {
				{
				State = 344; Match(HAS_ROLES_LABEL);
				}
			}

			State = 350;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 347; Match(WS);
				}
				}
				State = 352;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 353; newEntityRoleOrFeatures();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewEntityUsesFeaturesContext : ParserRuleContext {
		public ITerminalNode HAS_FEATURES_LABEL() { return GetToken(LUFileParser.HAS_FEATURES_LABEL, 0); }
		public NewEntityRoleOrFeaturesContext newEntityRoleOrFeatures() {
			return GetRuleContext<NewEntityRoleOrFeaturesContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public NewEntityUsesFeaturesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newEntityUsesFeatures; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewEntityUsesFeatures(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewEntityUsesFeatures(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewEntityUsesFeatures(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewEntityUsesFeaturesContext newEntityUsesFeatures() {
		NewEntityUsesFeaturesContext _localctx = new NewEntityUsesFeaturesContext(Context, State);
		EnterRule(_localctx, 50, RULE_newEntityUsesFeatures);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355; Match(HAS_FEATURES_LABEL);
			State = 359;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 356; Match(WS);
				}
				}
				State = 361;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 362; newEntityRoleOrFeatures();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewEntityRoleOrFeaturesContext : ParserRuleContext {
		public ITerminalNode[] NEW_ENTITY_IDENTIFIER() { return GetTokens(LUFileParser.NEW_ENTITY_IDENTIFIER); }
		public ITerminalNode NEW_ENTITY_IDENTIFIER(int i) {
			return GetToken(LUFileParser.NEW_ENTITY_IDENTIFIER, i);
		}
		public ITerminalNode[] NEW_ENTITY_IDENTIFIER_WITH_WS() { return GetTokens(LUFileParser.NEW_ENTITY_IDENTIFIER_WITH_WS); }
		public ITerminalNode NEW_ENTITY_IDENTIFIER_WITH_WS(int i) {
			return GetToken(LUFileParser.NEW_ENTITY_IDENTIFIER_WITH_WS, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(LUFileParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(LUFileParser.COMMA, i);
		}
		public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public NewEntityRoleOrFeaturesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newEntityRoleOrFeatures; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewEntityRoleOrFeatures(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewEntityRoleOrFeatures(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewEntityRoleOrFeatures(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewEntityRoleOrFeaturesContext newEntityRoleOrFeatures() {
		NewEntityRoleOrFeaturesContext _localctx = new NewEntityRoleOrFeaturesContext(Context, State);
		EnterRule(_localctx, 52, RULE_newEntityRoleOrFeatures);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 364;
			_la = TokenStream.LA(1);
			if ( !(_la==NEW_ENTITY_IDENTIFIER || _la==NEW_ENTITY_IDENTIFIER_WITH_WS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 381;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 368;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 365; Match(WS);
						}
						}
						State = 370;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 371; Match(COMMA);
					State = 375;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 372; Match(WS);
						}
						}
						State = 377;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 378;
					_la = TokenStream.LA(1);
					if ( !(_la==NEW_ENTITY_IDENTIFIER || _la==NEW_ENTITY_IDENTIFIER_WITH_WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 383;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewEntityNameContext : ParserRuleContext {
		public ITerminalNode NEW_ENTITY_IDENTIFIER() { return GetToken(LUFileParser.NEW_ENTITY_IDENTIFIER, 0); }
		public ITerminalNode PHRASE_LIST_LABEL() { return GetToken(LUFileParser.PHRASE_LIST_LABEL, 0); }
		public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public NewEntityNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newEntityName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewEntityName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewEntityName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewEntityName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewEntityNameContext newEntityName() {
		NewEntityNameContext _localctx = new NewEntityNameContext(Context, State);
		EnterRule(_localctx, 54, RULE_newEntityName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384; Match(NEW_ENTITY_IDENTIFIER);
			State = 392;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				{
				State = 388;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 385; Match(WS);
					}
					}
					State = 390;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 391; Match(PHRASE_LIST_LABEL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewEntityNameWithWSContext : ParserRuleContext {
		public ITerminalNode NEW_ENTITY_IDENTIFIER_WITH_WS() { return GetToken(LUFileParser.NEW_ENTITY_IDENTIFIER_WITH_WS, 0); }
		public ITerminalNode PHRASE_LIST_LABEL() { return GetToken(LUFileParser.PHRASE_LIST_LABEL, 0); }
		public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public NewEntityNameWithWSContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newEntityNameWithWS; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewEntityNameWithWS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewEntityNameWithWS(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewEntityNameWithWS(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewEntityNameWithWSContext newEntityNameWithWS() {
		NewEntityNameWithWSContext _localctx = new NewEntityNameWithWSContext(Context, State);
		EnterRule(_localctx, 56, RULE_newEntityNameWithWS);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394; Match(NEW_ENTITY_IDENTIFIER_WITH_WS);
			State = 402;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				{
				State = 398;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 395; Match(WS);
					}
					}
					State = 400;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 401; Match(PHRASE_LIST_LABEL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntitySectionContext : ParserRuleContext {
		public EntityDefinitionContext entityDefinition() {
			return GetRuleContext<EntityDefinitionContext>(0);
		}
		public EntitySectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entitySection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterEntitySection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitEntitySection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntitySection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntitySectionContext entitySection() {
		EntitySectionContext _localctx = new EntitySectionContext(Context, State);
		EnterRule(_localctx, 58, RULE_entitySection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404; entityDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityDefinitionContext : ParserRuleContext {
		public EntityLineContext entityLine() {
			return GetRuleContext<EntityLineContext>(0);
		}
		public EntityListBodyContext entityListBody() {
			return GetRuleContext<EntityListBodyContext>(0);
		}
		public EntityDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterEntityDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitEntityDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityDefinitionContext entityDefinition() {
		EntityDefinitionContext _localctx = new EntityDefinitionContext(Context, State);
		EnterRule(_localctx, 60, RULE_entityDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406; entityLine();
			State = 408;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				{
				State = 407; entityListBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityLineContext : ParserRuleContext {
		public ITerminalNode DOLLAR() { return GetToken(LUFileParser.DOLLAR, 0); }
		public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public EntityNameContext entityName() {
			return GetRuleContext<EntityNameContext>(0);
		}
		public ITerminalNode COLON_MARK() { return GetToken(LUFileParser.COLON_MARK, 0); }
		public EntityTypeContext entityType() {
			return GetRuleContext<EntityTypeContext>(0);
		}
		public EntityLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterEntityLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitEntityLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityLineContext entityLine() {
		EntityLineContext _localctx = new EntityLineContext(Context, State);
		EnterRule(_localctx, 62, RULE_entityLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 410; Match(WS);
				}
				}
				State = 415;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 416; Match(DOLLAR);
			State = 418;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				{
				State = 417; entityName();
				}
				break;
			}
			State = 421;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				{
				State = 420; Match(COLON_MARK);
				}
				break;
			}
			State = 424;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				{
				State = 423; entityType();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityNameContext : ParserRuleContext {
		public ITerminalNode[] ENTITY_TEXT() { return GetTokens(LUFileParser.ENTITY_TEXT); }
		public ITerminalNode ENTITY_TEXT(int i) {
			return GetToken(LUFileParser.ENTITY_TEXT, i);
		}
		public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public EntityNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterEntityName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitEntityName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityNameContext entityName() {
		EntityNameContext _localctx = new EntityNameContext(Context, State);
		EnterRule(_localctx, 64, RULE_entityName);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 427;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 426;
					_la = TokenStream.LA(1);
					if ( !(_la==WS || _la==ENTITY_TEXT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 429;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityTypeContext : ParserRuleContext {
		public CompositeEntityIdentifierContext[] compositeEntityIdentifier() {
			return GetRuleContexts<CompositeEntityIdentifierContext>();
		}
		public CompositeEntityIdentifierContext compositeEntityIdentifier(int i) {
			return GetRuleContext<CompositeEntityIdentifierContext>(i);
		}
		public RegexEntityIdentifierContext[] regexEntityIdentifier() {
			return GetRuleContexts<RegexEntityIdentifierContext>();
		}
		public RegexEntityIdentifierContext regexEntityIdentifier(int i) {
			return GetRuleContext<RegexEntityIdentifierContext>(i);
		}
		public ITerminalNode[] ENTITY_TEXT() { return GetTokens(LUFileParser.ENTITY_TEXT); }
		public ITerminalNode ENTITY_TEXT(int i) {
			return GetToken(LUFileParser.ENTITY_TEXT, i);
		}
		public ITerminalNode[] COLON_MARK() { return GetTokens(LUFileParser.COLON_MARK); }
		public ITerminalNode COLON_MARK(int i) {
			return GetToken(LUFileParser.COLON_MARK, i);
		}
		public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public EntityTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterEntityType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitEntityType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityTypeContext entityType() {
		EntityTypeContext _localctx = new EntityTypeContext(Context, State);
		EnterRule(_localctx, 66, RULE_entityType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 436;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 436;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case COMPOSITE_ENTITY:
						{
						State = 431; compositeEntityIdentifier();
						}
						break;
					case REGEX_ENTITY:
						{
						State = 432; regexEntityIdentifier();
						}
						break;
					case ENTITY_TEXT:
						{
						State = 433; Match(ENTITY_TEXT);
						}
						break;
					case COLON_MARK:
						{
						State = 434; Match(COLON_MARK);
						}
						break;
					case WS:
						{
						State = 435; Match(WS);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 438;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeEntityIdentifierContext : ParserRuleContext {
		public ITerminalNode COMPOSITE_ENTITY() { return GetToken(LUFileParser.COMPOSITE_ENTITY, 0); }
		public CompositeEntityIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeEntityIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterCompositeEntityIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitCompositeEntityIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositeEntityIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositeEntityIdentifierContext compositeEntityIdentifier() {
		CompositeEntityIdentifierContext _localctx = new CompositeEntityIdentifierContext(Context, State);
		EnterRule(_localctx, 68, RULE_compositeEntityIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440; Match(COMPOSITE_ENTITY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexEntityIdentifierContext : ParserRuleContext {
		public ITerminalNode REGEX_ENTITY() { return GetToken(LUFileParser.REGEX_ENTITY, 0); }
		public RegexEntityIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexEntityIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterRegexEntityIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitRegexEntityIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexEntityIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexEntityIdentifierContext regexEntityIdentifier() {
		RegexEntityIdentifierContext _localctx = new RegexEntityIdentifierContext(Context, State);
		EnterRule(_localctx, 70, RULE_regexEntityIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442; Match(REGEX_ENTITY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityListBodyContext : ParserRuleContext {
		public ErrorStringContext[] errorString() {
			return GetRuleContexts<ErrorStringContext>();
		}
		public ErrorStringContext errorString(int i) {
			return GetRuleContext<ErrorStringContext>(i);
		}
		public NormalItemStringContext[] normalItemString() {
			return GetRuleContexts<NormalItemStringContext>();
		}
		public NormalItemStringContext normalItemString(int i) {
			return GetRuleContext<NormalItemStringContext>(i);
		}
		public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public EntityListBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityListBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterEntityListBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitEntityListBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityListBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityListBodyContext entityListBody() {
		EntityListBodyContext _localctx = new EntityListBodyContext(Context, State);
		EnterRule(_localctx, 72, RULE_entityListBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 448;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 448;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
					case 1:
						{
						{
						State = 444; normalItemString();
						State = 445; newline();
						}
						}
						break;
					case 2:
						{
						State = 447; errorString();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 450;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalItemStringContext : ParserRuleContext {
		public ITerminalNode DASH() { return GetToken(LUFileParser.DASH, 0); }
		public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public ITerminalNode[] TEXT() { return GetTokens(LUFileParser.TEXT); }
		public ITerminalNode TEXT(int i) {
			return GetToken(LUFileParser.TEXT, i);
		}
		public ITerminalNode[] EXPRESSION() { return GetTokens(LUFileParser.EXPRESSION); }
		public ITerminalNode EXPRESSION(int i) {
			return GetToken(LUFileParser.EXPRESSION, i);
		}
		public ITerminalNode[] ESCAPE_CHARACTER() { return GetTokens(LUFileParser.ESCAPE_CHARACTER); }
		public ITerminalNode ESCAPE_CHARACTER(int i) {
			return GetToken(LUFileParser.ESCAPE_CHARACTER, i);
		}
		public NormalItemStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalItemString; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNormalItemString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNormalItemString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalItemString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NormalItemStringContext normalItemString() {
		NormalItemStringContext _localctx = new NormalItemStringContext(Context, State);
		EnterRule(_localctx, 74, RULE_normalItemString);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 455;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 452; Match(WS);
				}
				}
				State = 457;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 458; Match(DASH);
			State = 462;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 459;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WS) | (1L << ESCAPE_CHARACTER) | (1L << EXPRESSION) | (1L << TEXT))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 464;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportSectionContext : ParserRuleContext {
		public ImportDefinitionContext importDefinition() {
			return GetRuleContext<ImportDefinitionContext>(0);
		}
		public ImportSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importSection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterImportSection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitImportSection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportSectionContext importSection() {
		ImportSectionContext _localctx = new ImportSectionContext(Context, State);
		EnterRule(_localctx, 76, RULE_importSection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 465; importDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDefinitionContext : ParserRuleContext {
		public ITerminalNode IMPORT() { return GetToken(LUFileParser.IMPORT, 0); }
		public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public ImportDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterImportDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitImportDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportDefinitionContext importDefinition() {
		ImportDefinitionContext _localctx = new ImportDefinitionContext(Context, State);
		EnterRule(_localctx, 78, RULE_importDefinition);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 470;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 467; Match(WS);
				}
				}
				State = 472;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 473; Match(IMPORT);
			State = 477;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 474; Match(WS);
					}
					} 
				}
				State = 479;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QnaSectionContext : ParserRuleContext {
		public QnaDefinitionContext qnaDefinition() {
			return GetRuleContext<QnaDefinitionContext>(0);
		}
		public QnaSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qnaSection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterQnaSection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitQnaSection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQnaSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QnaSectionContext qnaSection() {
		QnaSectionContext _localctx = new QnaSectionContext(Context, State);
		EnterRule(_localctx, 80, RULE_qnaSection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 480; qnaDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QnaDefinitionContext : ParserRuleContext {
		public QnaQuestionContext qnaQuestion() {
			return GetRuleContext<QnaQuestionContext>(0);
		}
		public MoreQuestionsBodyContext moreQuestionsBody() {
			return GetRuleContext<MoreQuestionsBodyContext>(0);
		}
		public QnaAnswerBodyContext qnaAnswerBody() {
			return GetRuleContext<QnaAnswerBodyContext>(0);
		}
		public QnaSourceInfoContext qnaSourceInfo() {
			return GetRuleContext<QnaSourceInfoContext>(0);
		}
		public QnaIdMarkContext qnaIdMark() {
			return GetRuleContext<QnaIdMarkContext>(0);
		}
		public PromptSectionContext promptSection() {
			return GetRuleContext<PromptSectionContext>(0);
		}
		public QnaDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qnaDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterQnaDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitQnaDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQnaDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QnaDefinitionContext qnaDefinition() {
		QnaDefinitionContext _localctx = new QnaDefinitionContext(Context, State);
		EnterRule(_localctx, 82, RULE_qnaDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 483;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				State = 482; qnaSourceInfo();
				}
				break;
			}
			State = 486;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				{
				State = 485; qnaIdMark();
				}
				break;
			}
			State = 488; qnaQuestion();
			State = 489; moreQuestionsBody();
			State = 490; qnaAnswerBody();
			State = 492;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				{
				State = 491; promptSection();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QnaSourceInfoContext : ParserRuleContext {
		public ITerminalNode QNA_SOURCE_INFO() { return GetToken(LUFileParser.QNA_SOURCE_INFO, 0); }
		public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public QnaSourceInfoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qnaSourceInfo; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterQnaSourceInfo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitQnaSourceInfo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQnaSourceInfo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QnaSourceInfoContext qnaSourceInfo() {
		QnaSourceInfoContext _localctx = new QnaSourceInfoContext(Context, State);
		EnterRule(_localctx, 84, RULE_qnaSourceInfo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 494; Match(WS);
				}
				}
				State = 499;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 500; Match(QNA_SOURCE_INFO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QnaIdMarkContext : ParserRuleContext {
		public ITerminalNode QNA_ID_MARK() { return GetToken(LUFileParser.QNA_ID_MARK, 0); }
		public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public QnaIdMarkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qnaIdMark; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterQnaIdMark(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitQnaIdMark(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQnaIdMark(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QnaIdMarkContext qnaIdMark() {
		QnaIdMarkContext _localctx = new QnaIdMarkContext(Context, State);
		EnterRule(_localctx, 86, RULE_qnaIdMark);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 505;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 502; Match(WS);
				}
				}
				State = 507;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 508; Match(QNA_ID_MARK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QnaQuestionContext : ParserRuleContext {
		public ITerminalNode QNA() { return GetToken(LUFileParser.QNA, 0); }
		public QuestionTextContext questionText() {
			return GetRuleContext<QuestionTextContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public QnaQuestionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qnaQuestion; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterQnaQuestion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitQnaQuestion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQnaQuestion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QnaQuestionContext qnaQuestion() {
		QnaQuestionContext _localctx = new QnaQuestionContext(Context, State);
		EnterRule(_localctx, 88, RULE_qnaQuestion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 513;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 510; Match(WS);
				}
				}
				State = 515;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 516; Match(QNA);
			State = 517; questionText();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuestionTextContext : ParserRuleContext {
		public ITerminalNode[] QNA_TEXT() { return GetTokens(LUFileParser.QNA_TEXT); }
		public ITerminalNode QNA_TEXT(int i) {
			return GetToken(LUFileParser.QNA_TEXT, i);
		}
		public QuestionTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_questionText; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterQuestionText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitQuestionText(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuestionText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuestionTextContext questionText() {
		QuestionTextContext _localctx = new QuestionTextContext(Context, State);
		EnterRule(_localctx, 90, RULE_questionText);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 522;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==QNA_TEXT) {
				{
				{
				State = 519; Match(QNA_TEXT);
				}
				}
				State = 524;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoreQuestionsBodyContext : ParserRuleContext {
		public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public ErrorQuestionStringContext[] errorQuestionString() {
			return GetRuleContexts<ErrorQuestionStringContext>();
		}
		public ErrorQuestionStringContext errorQuestionString(int i) {
			return GetRuleContext<ErrorQuestionStringContext>(i);
		}
		public MoreQuestionContext[] moreQuestion() {
			return GetRuleContexts<MoreQuestionContext>();
		}
		public MoreQuestionContext moreQuestion(int i) {
			return GetRuleContext<MoreQuestionContext>(i);
		}
		public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public MoreQuestionsBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moreQuestionsBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterMoreQuestionsBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitMoreQuestionsBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMoreQuestionsBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoreQuestionsBodyContext moreQuestionsBody() {
		MoreQuestionsBodyContext _localctx = new MoreQuestionsBodyContext(Context, State);
		EnterRule(_localctx, 92, RULE_moreQuestionsBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 528;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 525; Match(WS);
					}
					} 
				}
				State = 530;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			}
			State = 537;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 535;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case DASH:
						{
						{
						State = 531; moreQuestion();
						State = 532; newline();
						}
						}
						break;
					case WS:
					case INVALID_TOKEN_DEFAULT_MODE:
						{
						State = 534; errorQuestionString();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 539;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoreQuestionContext : ParserRuleContext {
		public ITerminalNode DASH() { return GetToken(LUFileParser.DASH, 0); }
		public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public ITerminalNode[] TEXT() { return GetTokens(LUFileParser.TEXT); }
		public ITerminalNode TEXT(int i) {
			return GetToken(LUFileParser.TEXT, i);
		}
		public MoreQuestionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moreQuestion; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterMoreQuestion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitMoreQuestion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMoreQuestion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoreQuestionContext moreQuestion() {
		MoreQuestionContext _localctx = new MoreQuestionContext(Context, State);
		EnterRule(_localctx, 94, RULE_moreQuestion);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 540; Match(DASH);
			State = 544;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 541;
					_la = TokenStream.LA(1);
					if ( !(_la==WS || _la==TEXT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 546;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorQuestionStringContext : ParserRuleContext {
		public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public ITerminalNode[] INVALID_TOKEN_DEFAULT_MODE() { return GetTokens(LUFileParser.INVALID_TOKEN_DEFAULT_MODE); }
		public ITerminalNode INVALID_TOKEN_DEFAULT_MODE(int i) {
			return GetToken(LUFileParser.INVALID_TOKEN_DEFAULT_MODE, i);
		}
		public ErrorQuestionStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorQuestionString; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterErrorQuestionString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitErrorQuestionString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorQuestionString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorQuestionStringContext errorQuestionString() {
		ErrorQuestionStringContext _localctx = new ErrorQuestionStringContext(Context, State);
		EnterRule(_localctx, 96, RULE_errorQuestionString);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 548;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 547;
					_la = TokenStream.LA(1);
					if ( !(_la==WS || _la==INVALID_TOKEN_DEFAULT_MODE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 550;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QnaAnswerBodyContext : ParserRuleContext {
		public MultiLineAnswerContext multiLineAnswer() {
			return GetRuleContext<MultiLineAnswerContext>(0);
		}
		public FilterSectionContext filterSection() {
			return GetRuleContext<FilterSectionContext>(0);
		}
		public QnaAnswerBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qnaAnswerBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterQnaAnswerBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitQnaAnswerBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQnaAnswerBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QnaAnswerBodyContext qnaAnswerBody() {
		QnaAnswerBodyContext _localctx = new QnaAnswerBodyContext(Context, State);
		EnterRule(_localctx, 98, RULE_qnaAnswerBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 560;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				{
				{
				State = 553;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
				case 1:
					{
					State = 552; filterSection();
					}
					break;
				}
				State = 555; multiLineAnswer();
				}
				}
				break;
			case 2:
				{
				{
				State = 556; multiLineAnswer();
				State = 558;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
				case 1:
					{
					State = 557; filterSection();
					}
					break;
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterSectionContext : ParserRuleContext {
		public ITerminalNode FILTER_MARK() { return GetToken(LUFileParser.FILTER_MARK, 0); }
		public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public FilterLineContext[] filterLine() {
			return GetRuleContexts<FilterLineContext>();
		}
		public FilterLineContext filterLine(int i) {
			return GetRuleContext<FilterLineContext>(i);
		}
		public ErrorFilterLineContext[] errorFilterLine() {
			return GetRuleContexts<ErrorFilterLineContext>();
		}
		public ErrorFilterLineContext errorFilterLine(int i) {
			return GetRuleContext<ErrorFilterLineContext>(i);
		}
		public FilterSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterSection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterFilterSection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitFilterSection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterSectionContext filterSection() {
		FilterSectionContext _localctx = new FilterSectionContext(Context, State);
		EnterRule(_localctx, 100, RULE_filterSection);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 565;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 562; Match(WS);
				}
				}
				State = 567;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 568; Match(FILTER_MARK);
			State = 571;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 571;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
					case 1:
						{
						State = 569; filterLine();
						}
						break;
					case 2:
						{
						State = 570; errorFilterLine();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 573;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,80,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PromptSectionContext : ParserRuleContext {
		public ITerminalNode PROMPT_MARK() { return GetToken(LUFileParser.PROMPT_MARK, 0); }
		public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public FilterLineContext[] filterLine() {
			return GetRuleContexts<FilterLineContext>();
		}
		public FilterLineContext filterLine(int i) {
			return GetRuleContext<FilterLineContext>(i);
		}
		public ErrorFilterLineContext[] errorFilterLine() {
			return GetRuleContexts<ErrorFilterLineContext>();
		}
		public ErrorFilterLineContext errorFilterLine(int i) {
			return GetRuleContext<ErrorFilterLineContext>(i);
		}
		public PromptSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_promptSection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterPromptSection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitPromptSection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPromptSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PromptSectionContext promptSection() {
		PromptSectionContext _localctx = new PromptSectionContext(Context, State);
		EnterRule(_localctx, 102, RULE_promptSection);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 578;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 575; Match(WS);
				}
				}
				State = 580;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 581; Match(PROMPT_MARK);
			State = 584;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 584;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
					case 1:
						{
						State = 582; filterLine();
						}
						break;
					case 2:
						{
						State = 583; errorFilterLine();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 586;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,83,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterLineContext : ParserRuleContext {
		public ITerminalNode DASH() { return GetToken(LUFileParser.DASH, 0); }
		public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public ITerminalNode[] TEXT() { return GetTokens(LUFileParser.TEXT); }
		public ITerminalNode TEXT(int i) {
			return GetToken(LUFileParser.TEXT, i);
		}
		public FilterLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterFilterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitFilterLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterLineContext filterLine() {
		FilterLineContext _localctx = new FilterLineContext(Context, State);
		EnterRule(_localctx, 104, RULE_filterLine);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 591;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 588; Match(WS);
				}
				}
				State = 593;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 594; Match(DASH);
			State = 598;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,85,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 595;
					_la = TokenStream.LA(1);
					if ( !(_la==WS || _la==TEXT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 600;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,85,Context);
			}
			State = 601; newline();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorFilterLineContext : ParserRuleContext {
		public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public ITerminalNode[] INVALID_TOKEN_DEFAULT_MODE() { return GetTokens(LUFileParser.INVALID_TOKEN_DEFAULT_MODE); }
		public ITerminalNode INVALID_TOKEN_DEFAULT_MODE(int i) {
			return GetToken(LUFileParser.INVALID_TOKEN_DEFAULT_MODE, i);
		}
		public ErrorFilterLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorFilterLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterErrorFilterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitErrorFilterLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorFilterLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorFilterLineContext errorFilterLine() {
		ErrorFilterLineContext _localctx = new ErrorFilterLineContext(Context, State);
		EnterRule(_localctx, 106, RULE_errorFilterLine);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 604;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 603;
					_la = TokenStream.LA(1);
					if ( !(_la==WS || _la==INVALID_TOKEN_DEFAULT_MODE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 606;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiLineAnswerContext : ParserRuleContext {
		public ITerminalNode MULTI_LINE_TEXT() { return GetToken(LUFileParser.MULTI_LINE_TEXT, 0); }
		public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public MultiLineAnswerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiLineAnswer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterMultiLineAnswer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitMultiLineAnswer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiLineAnswer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiLineAnswerContext multiLineAnswer() {
		MultiLineAnswerContext _localctx = new MultiLineAnswerContext(Context, State);
		EnterRule(_localctx, 108, RULE_multiLineAnswer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 611;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 608; Match(WS);
				}
				}
				State = 613;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 614; Match(MULTI_LINE_TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModelInfoSectionContext : ParserRuleContext {
		public ModelInfoDefinitionContext modelInfoDefinition() {
			return GetRuleContext<ModelInfoDefinitionContext>(0);
		}
		public ModelInfoSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modelInfoSection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterModelInfoSection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitModelInfoSection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModelInfoSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModelInfoSectionContext modelInfoSection() {
		ModelInfoSectionContext _localctx = new ModelInfoSectionContext(Context, State);
		EnterRule(_localctx, 110, RULE_modelInfoSection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 616; modelInfoDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModelInfoDefinitionContext : ParserRuleContext {
		public ITerminalNode MODEL_INFO() { return GetToken(LUFileParser.MODEL_INFO, 0); }
		public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public ModelInfoDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modelInfoDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterModelInfoDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitModelInfoDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModelInfoDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModelInfoDefinitionContext modelInfoDefinition() {
		ModelInfoDefinitionContext _localctx = new ModelInfoDefinitionContext(Context, State);
		EnterRule(_localctx, 112, RULE_modelInfoDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 621;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 618; Match(WS);
				}
				}
				State = 623;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 624; Match(MODEL_INFO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ')', '\x275', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x3', '\x2', '\x6', '\x2', 'v', '\n', '\x2', '\r', 
		'\x2', '\xE', '\x2', 'w', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '\x84', '\n', '\x3', '\x3', '\x4', 
		'\a', '\x4', '\x87', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x8A', '\v', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x6', '\x5', '\x8F', 
		'\n', '\x5', '\r', '\x5', '\xE', '\x5', '\x90', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\a', '\a', '\x97', '\n', '\a', '\f', '\a', 
		'\xE', '\a', '\x9A', '\v', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 
		'\x9E', '\n', '\a', '\f', '\a', '\xE', '\a', '\xA1', '\v', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', 
		'\xA8', '\n', '\b', '\f', '\b', '\xE', '\b', '\xAB', '\v', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '\xB0', '\n', '\t', '\f', 
		'\t', '\xE', '\t', '\xB3', '\v', '\t', '\x3', '\n', '\x6', '\n', '\xB6', 
		'\n', '\n', '\r', '\n', '\xE', '\n', '\xB7', '\x3', '\v', '\a', '\v', 
		'\xBB', '\n', '\v', '\f', '\v', '\xE', '\v', '\xBE', '\v', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', 
		'\x3', '\r', '\x5', '\r', '\xC7', '\n', '\r', '\x3', '\xE', '\a', '\xE', 
		'\xCA', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\xCD', '\v', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x5', '\xE', '\xD1', '\n', '\xE', '\x3', '\xE', 
		'\a', '\xE', '\xD4', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\xD7', '\v', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\a', '\xF', '\xDE', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xE1', 
		'\v', '\xF', '\x3', '\x10', '\a', '\x10', '\xE4', '\n', '\x10', '\f', 
		'\x10', '\xE', '\x10', '\xE7', '\v', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x11', '\a', '\x11', '\xEC', '\n', '\x11', '\f', '\x11', '\xE', 
		'\x11', '\xEF', '\v', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x6', '\x11', '\xF5', '\n', '\x11', '\r', '\x11', '\xE', 
		'\x11', '\xF6', '\x3', '\x12', '\a', '\x12', '\xFA', '\n', '\x12', '\f', 
		'\x12', '\xE', '\x12', '\xFD', '\v', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\a', '\x12', '\x101', '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\x104', 
		'\v', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\x5', '\x14', '\x10A', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x6', '\x15', '\x110', '\n', '\x15', '\r', '\x15', 
		'\xE', '\x15', '\x111', '\x3', '\x16', '\a', '\x16', '\x115', '\n', '\x16', 
		'\f', '\x16', '\xE', '\x16', '\x118', '\v', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\a', '\x16', '\x11C', '\n', '\x16', '\f', '\x16', '\xE', '\x16', 
		'\x11F', '\v', '\x16', '\x3', '\x16', '\x5', '\x16', '\x122', '\n', '\x16', 
		'\x3', '\x16', '\a', '\x16', '\x125', '\n', '\x16', '\f', '\x16', '\xE', 
		'\x16', '\x128', '\v', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', 
		'\x12C', '\n', '\x16', '\x3', '\x16', '\a', '\x16', '\x12F', '\n', '\x16', 
		'\f', '\x16', '\xE', '\x16', '\x132', '\v', '\x16', '\x3', '\x16', '\x5', 
		'\x16', '\x135', '\n', '\x16', '\x3', '\x16', '\a', '\x16', '\x138', '\n', 
		'\x16', '\f', '\x16', '\xE', '\x16', '\x13B', '\v', '\x16', '\x3', '\x16', 
		'\x5', '\x16', '\x13E', '\n', '\x16', '\x3', '\x16', '\a', '\x16', '\x141', 
		'\n', '\x16', '\f', '\x16', '\xE', '\x16', '\x144', '\v', '\x16', '\x3', 
		'\x16', '\x5', '\x16', '\x147', '\n', '\x16', '\x3', '\x16', '\a', '\x16', 
		'\x14A', '\n', '\x16', '\f', '\x16', '\xE', '\x16', '\x14D', '\v', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x151', '\n', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x5', '\x1A', '\x15C', 
		'\n', '\x1A', '\x3', '\x1A', '\a', '\x1A', '\x15F', '\n', '\x1A', '\f', 
		'\x1A', '\xE', '\x1A', '\x162', '\v', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1B', '\x3', '\x1B', '\a', '\x1B', '\x168', '\n', '\x1B', '\f', 
		'\x1B', '\xE', '\x1B', '\x16B', '\v', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1C', '\x3', '\x1C', '\a', '\x1C', '\x171', '\n', '\x1C', '\f', 
		'\x1C', '\xE', '\x1C', '\x174', '\v', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\a', '\x1C', '\x178', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', '\x17B', 
		'\v', '\x1C', '\x3', '\x1C', '\a', '\x1C', '\x17E', '\n', '\x1C', '\f', 
		'\x1C', '\xE', '\x1C', '\x181', '\v', '\x1C', '\x3', '\x1D', '\x3', '\x1D', 
		'\a', '\x1D', '\x185', '\n', '\x1D', '\f', '\x1D', '\xE', '\x1D', '\x188', 
		'\v', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x18B', '\n', '\x1D', '\x3', 
		'\x1E', '\x3', '\x1E', '\a', '\x1E', '\x18F', '\n', '\x1E', '\f', '\x1E', 
		'\xE', '\x1E', '\x192', '\v', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x195', 
		'\n', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x5', 
		' ', '\x19B', '\n', ' ', '\x3', '!', '\a', '!', '\x19E', '\n', '!', '\f', 
		'!', '\xE', '!', '\x1A1', '\v', '!', '\x3', '!', '\x3', '!', '\x5', '!', 
		'\x1A5', '\n', '!', '\x3', '!', '\x5', '!', '\x1A8', '\n', '!', '\x3', 
		'!', '\x5', '!', '\x1AB', '\n', '!', '\x3', '\"', '\x6', '\"', '\x1AE', 
		'\n', '\"', '\r', '\"', '\xE', '\"', '\x1AF', '\x3', '#', '\x3', '#', 
		'\x3', '#', '\x3', '#', '\x3', '#', '\x6', '#', '\x1B7', '\n', '#', '\r', 
		'#', '\xE', '#', '\x1B8', '\x3', '$', '\x3', '$', '\x3', '%', '\x3', '%', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x6', '&', '\x1C3', '\n', 
		'&', '\r', '&', '\xE', '&', '\x1C4', '\x3', '\'', '\a', '\'', '\x1C8', 
		'\n', '\'', '\f', '\'', '\xE', '\'', '\x1CB', '\v', '\'', '\x3', '\'', 
		'\x3', '\'', '\a', '\'', '\x1CF', '\n', '\'', '\f', '\'', '\xE', '\'', 
		'\x1D2', '\v', '\'', '\x3', '(', '\x3', '(', '\x3', ')', '\a', ')', '\x1D7', 
		'\n', ')', '\f', ')', '\xE', ')', '\x1DA', '\v', ')', '\x3', ')', '\x3', 
		')', '\a', ')', '\x1DE', '\n', ')', '\f', ')', '\xE', ')', '\x1E1', '\v', 
		')', '\x3', '*', '\x3', '*', '\x3', '+', '\x5', '+', '\x1E6', '\n', '+', 
		'\x3', '+', '\x5', '+', '\x1E9', '\n', '+', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\x5', '+', '\x1EF', '\n', '+', '\x3', ',', '\a', ',', 
		'\x1F2', '\n', ',', '\f', ',', '\xE', ',', '\x1F5', '\v', ',', '\x3', 
		',', '\x3', ',', '\x3', '-', '\a', '-', '\x1FA', '\n', '-', '\f', '-', 
		'\xE', '-', '\x1FD', '\v', '-', '\x3', '-', '\x3', '-', '\x3', '.', '\a', 
		'.', '\x202', '\n', '.', '\f', '.', '\xE', '.', '\x205', '\v', '.', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x3', '/', '\a', '/', '\x20B', '\n', '/', 
		'\f', '/', '\xE', '/', '\x20E', '\v', '/', '\x3', '\x30', '\a', '\x30', 
		'\x211', '\n', '\x30', '\f', '\x30', '\xE', '\x30', '\x214', '\v', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\a', '\x30', 
		'\x21A', '\n', '\x30', '\f', '\x30', '\xE', '\x30', '\x21D', '\v', '\x30', 
		'\x3', '\x31', '\x3', '\x31', '\a', '\x31', '\x221', '\n', '\x31', '\f', 
		'\x31', '\xE', '\x31', '\x224', '\v', '\x31', '\x3', '\x32', '\x6', '\x32', 
		'\x227', '\n', '\x32', '\r', '\x32', '\xE', '\x32', '\x228', '\x3', '\x33', 
		'\x5', '\x33', '\x22C', '\n', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', 
		'\x33', '\x5', '\x33', '\x231', '\n', '\x33', '\x5', '\x33', '\x233', 
		'\n', '\x33', '\x3', '\x34', '\a', '\x34', '\x236', '\n', '\x34', '\f', 
		'\x34', '\xE', '\x34', '\x239', '\v', '\x34', '\x3', '\x34', '\x3', '\x34', 
		'\x3', '\x34', '\x6', '\x34', '\x23E', '\n', '\x34', '\r', '\x34', '\xE', 
		'\x34', '\x23F', '\x3', '\x35', '\a', '\x35', '\x243', '\n', '\x35', '\f', 
		'\x35', '\xE', '\x35', '\x246', '\v', '\x35', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\x6', '\x35', '\x24B', '\n', '\x35', '\r', '\x35', '\xE', 
		'\x35', '\x24C', '\x3', '\x36', '\a', '\x36', '\x250', '\n', '\x36', '\f', 
		'\x36', '\xE', '\x36', '\x253', '\v', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\a', '\x36', '\x257', '\n', '\x36', '\f', '\x36', '\xE', '\x36', '\x25A', 
		'\v', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x37', '\x6', '\x37', 
		'\x25F', '\n', '\x37', '\r', '\x37', '\xE', '\x37', '\x260', '\x3', '\x38', 
		'\a', '\x38', '\x264', '\n', '\x38', '\f', '\x38', '\xE', '\x38', '\x267', 
		'\v', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x39', '\x3', '\x39', 
		'\x3', ':', '\a', ':', '\x26E', '\n', ':', '\f', ':', '\xE', ':', '\x271', 
		'\v', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', 'w', '\x2', ';', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', 
		'\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', 
		'\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 'l', 'n', 'p', 'r', 
		'\x2', '\b', '\x3', '\x3', '\x4', '\x4', '\x4', '\x2', '\x3', '\x3', '\x12', 
		'\x12', '\x4', '\x2', '\x3', '\x3', ' ', '\"', '\x3', '\x2', '\x1B', '\x1C', 
		'\x4', '\x2', '\x3', '\x3', '&', '&', '\x4', '\x2', '\x3', '\x3', '\"', 
		'\"', '\x2', '\x29F', '\x2', 'u', '\x3', '\x2', '\x2', '\x2', '\x4', '\x83', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\x88', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x8E', '\x3', '\x2', '\x2', '\x2', '\n', '\x92', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\x98', '\x3', '\x2', '\x2', '\x2', '\xE', '\xA4', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\xAC', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\xB5', '\x3', '\x2', '\x2', '\x2', '\x14', '\xBC', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\xC2', '\x3', '\x2', '\x2', '\x2', '\x18', '\xC4', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\xCB', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\xDA', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xE5', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\xED', '\x3', '\x2', '\x2', '\x2', '\"', '\xFB', '\x3', 
		'\x2', '\x2', '\x2', '$', '\x105', '\x3', '\x2', '\x2', '\x2', '&', '\x107', 
		'\x3', '\x2', '\x2', '\x2', '(', '\x10F', '\x3', '\x2', '\x2', '\x2', 
		'*', '\x116', '\x3', '\x2', '\x2', '\x2', ',', '\x154', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x156', '\x3', '\x2', '\x2', '\x2', '\x30', '\x158', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x15B', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x165', '\x3', '\x2', '\x2', '\x2', '\x36', '\x16E', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x182', '\x3', '\x2', '\x2', '\x2', ':', '\x18C', 
		'\x3', '\x2', '\x2', '\x2', '<', '\x196', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x198', '\x3', '\x2', '\x2', '\x2', '@', '\x19F', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x1AD', '\x3', '\x2', '\x2', '\x2', '\x44', '\x1B6', 
		'\x3', '\x2', '\x2', '\x2', '\x46', '\x1BA', '\x3', '\x2', '\x2', '\x2', 
		'H', '\x1BC', '\x3', '\x2', '\x2', '\x2', 'J', '\x1C2', '\x3', '\x2', 
		'\x2', '\x2', 'L', '\x1C9', '\x3', '\x2', '\x2', '\x2', 'N', '\x1D3', 
		'\x3', '\x2', '\x2', '\x2', 'P', '\x1D8', '\x3', '\x2', '\x2', '\x2', 
		'R', '\x1E2', '\x3', '\x2', '\x2', '\x2', 'T', '\x1E5', '\x3', '\x2', 
		'\x2', '\x2', 'V', '\x1F3', '\x3', '\x2', '\x2', '\x2', 'X', '\x1FB', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '\x203', '\x3', '\x2', '\x2', '\x2', 
		'\\', '\x20C', '\x3', '\x2', '\x2', '\x2', '^', '\x212', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x21E', '\x3', '\x2', '\x2', '\x2', '\x62', '\x226', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x232', '\x3', '\x2', '\x2', '\x2', 
		'\x66', '\x237', '\x3', '\x2', '\x2', '\x2', 'h', '\x244', '\x3', '\x2', 
		'\x2', '\x2', 'j', '\x251', '\x3', '\x2', '\x2', '\x2', 'l', '\x25E', 
		'\x3', '\x2', '\x2', '\x2', 'n', '\x265', '\x3', '\x2', '\x2', '\x2', 
		'p', '\x26A', '\x3', '\x2', '\x2', '\x2', 'r', '\x26F', '\x3', '\x2', 
		'\x2', '\x2', 't', 'v', '\x5', '\x4', '\x3', '\x2', 'u', 't', '\x3', '\x2', 
		'\x2', '\x2', 'v', 'w', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\x3', '\x2', 
		'\x2', '\x2', 'w', 'u', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\x3', '\x2', 
		'\x2', '\x2', 'y', 'z', '\a', '\x2', '\x2', '\x3', 'z', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '{', '\x84', '\x5', '\x6', '\x4', '\x2', '|', '\x84', 
		'\x5', '\n', '\x6', '\x2', '}', '\x84', '\x5', '\x16', '\f', '\x2', '~', 
		'\x84', '\x5', '<', '\x1F', '\x2', '\x7F', '\x84', '\x5', '$', '\x13', 
		'\x2', '\x80', '\x84', '\x5', 'N', '(', '\x2', '\x81', '\x84', '\x5', 
		'R', '*', '\x2', '\x82', '\x84', '\x5', 'p', '\x39', '\x2', '\x83', '{', 
		'\x3', '\x2', '\x2', '\x2', '\x83', '|', '\x3', '\x2', '\x2', '\x2', '\x83', 
		'}', '\x3', '\x2', '\x2', '\x2', '\x83', '~', '\x3', '\x2', '\x2', '\x2', 
		'\x83', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x83', '\x80', '\x3', '\x2', 
		'\x2', '\x2', '\x83', '\x81', '\x3', '\x2', '\x2', '\x2', '\x83', '\x82', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\x85', '\x87', '\a', '\x3', '\x2', '\x2', '\x86', '\x85', '\x3', '\x2', 
		'\x2', '\x2', '\x87', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x88', '\x86', 
		'\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\x89', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x88', '\x3', '\x2', 
		'\x2', '\x2', '\x8B', '\x8C', '\t', '\x2', '\x2', '\x2', '\x8C', '\a', 
		'\x3', '\x2', '\x2', '\x2', '\x8D', '\x8F', '\t', '\x3', '\x2', '\x2', 
		'\x8E', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\x3', '\x2', 
		'\x2', '\x2', '\x90', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', 
		'\x3', '\x2', '\x2', '\x2', '\x91', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\x92', '\x93', '\x5', '\f', '\a', '\x2', '\x93', '\x94', '\x5', '\x12', 
		'\n', '\x2', '\x94', '\v', '\x3', '\x2', '\x2', '\x2', '\x95', '\x97', 
		'\a', '\x3', '\x2', '\x2', '\x96', '\x95', '\x3', '\x2', '\x2', '\x2', 
		'\x97', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x98', '\x96', '\x3', '\x2', 
		'\x2', '\x2', '\x98', '\x99', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9B', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\x98', '\x3', '\x2', '\x2', '\x2', 
		'\x9B', '\x9F', '\a', '\t', '\x2', '\x2', '\x9C', '\x9E', '\a', '\x3', 
		'\x2', '\x2', '\x9D', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9E', '\xA1', 
		'\x3', '\x2', '\x2', '\x2', '\x9F', '\x9D', '\x3', '\x2', '\x2', '\x2', 
		'\x9F', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA2', '\x3', '\x2', 
		'\x2', '\x2', '\xA1', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', 
		'\x5', '\xE', '\b', '\x2', '\xA3', '\r', '\x3', '\x2', '\x2', '\x2', '\xA4', 
		'\xA9', '\x5', '\x10', '\t', '\x2', '\xA5', '\xA8', '\a', '\x3', '\x2', 
		'\x2', '\xA6', '\xA8', '\x5', '\x10', '\t', '\x2', '\xA7', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\xA7', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA8', 
		'\xAB', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xA7', '\x3', '\x2', '\x2', 
		'\x2', '\xA9', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\xAB', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAC', 
		'\xB1', '\a', '\x1E', '\x2', '\x2', '\xAD', '\xAE', '\a', '\x1F', '\x2', 
		'\x2', '\xAE', '\xB0', '\a', '\x1E', '\x2', '\x2', '\xAF', '\xAD', '\x3', 
		'\x2', '\x2', '\x2', '\xB0', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB1', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\x3', '\x2', '\x2', 
		'\x2', '\xB2', '\x11', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB1', '\x3', 
		'\x2', '\x2', '\x2', '\xB4', '\xB6', '\x5', '\x14', '\v', '\x2', '\xB5', 
		'\xB4', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\x3', '\x2', '\x2', 
		'\x2', '\xB7', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB8', '\x3', 
		'\x2', '\x2', '\x2', '\xB8', '\x13', '\x3', '\x2', '\x2', '\x2', '\xB9', 
		'\xBB', '\a', '\x3', '\x2', '\x2', '\xBA', '\xB9', '\x3', '\x2', '\x2', 
		'\x2', '\xBB', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBA', '\x3', 
		'\x2', '\x2', '\x2', '\xBC', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBD', 
		'\xBF', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBC', '\x3', '\x2', '\x2', 
		'\x2', '\xBF', '\xC0', '\a', '\t', '\x2', '\x2', '\xC0', '\xC1', '\x5', 
		'\x16', '\f', '\x2', '\xC1', '\x15', '\x3', '\x2', '\x2', '\x2', '\xC2', 
		'\xC3', '\x5', '\x18', '\r', '\x2', '\xC3', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\xC4', '\xC6', '\x5', '\x1A', '\xE', '\x2', '\xC5', '\xC7', '\x5', 
		'\x1E', '\x10', '\x2', '\xC6', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC6', 
		'\xC7', '\x3', '\x2', '\x2', '\x2', '\xC7', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\xC8', '\xCA', '\a', '\x3', '\x2', '\x2', '\xC9', '\xC8', '\x3', 
		'\x2', '\x2', '\x2', '\xCA', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCB', 
		'\xC9', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCC', '\x3', '\x2', '\x2', 
		'\x2', '\xCC', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCB', '\x3', 
		'\x2', '\x2', '\x2', '\xCE', '\xD0', '\a', '\t', '\x2', '\x2', '\xCF', 
		'\xD1', '\a', '\t', '\x2', '\x2', '\xD0', '\xCF', '\x3', '\x2', '\x2', 
		'\x2', '\xD0', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD5', '\x3', 
		'\x2', '\x2', '\x2', '\xD2', '\xD4', '\a', '\x3', '\x2', '\x2', '\xD3', 
		'\xD2', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD7', '\x3', '\x2', '\x2', 
		'\x2', '\xD5', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\x3', 
		'\x2', '\x2', '\x2', '\xD6', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xD7', 
		'\xD5', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD9', '\x5', '\x1C', '\xF', 
		'\x2', '\xD9', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xDF', '\x5', 
		'\x10', '\t', '\x2', '\xDB', '\xDE', '\a', '\x3', '\x2', '\x2', '\xDC', 
		'\xDE', '\x5', '\x10', '\t', '\x2', '\xDD', '\xDB', '\x3', '\x2', '\x2', 
		'\x2', '\xDD', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xE1', '\x3', 
		'\x2', '\x2', '\x2', '\xDF', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDF', 
		'\xE0', '\x3', '\x2', '\x2', '\x2', '\xE0', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\xE1', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE4', '\a', 
		'\x3', '\x2', '\x2', '\xE3', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE4', 
		'\xE7', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE3', '\x3', '\x2', '\x2', 
		'\x2', '\xE5', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE8', '\x3', 
		'\x2', '\x2', '\x2', '\xE7', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE8', 
		'\xE9', '\x5', ' ', '\x11', '\x2', '\xE9', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\xEA', '\xEC', '\a', '\x3', '\x2', '\x2', '\xEB', '\xEA', '\x3', 
		'\x2', '\x2', '\x2', '\xEC', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xED', 
		'\xEB', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEE', '\x3', '\x2', '\x2', 
		'\x2', '\xEE', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xED', '\x3', 
		'\x2', '\x2', '\x2', '\xF0', '\xF1', '\x5', '\"', '\x12', '\x2', '\xF1', 
		'\xF2', '\x5', '\x6', '\x4', '\x2', '\xF2', '\xF5', '\x3', '\x2', '\x2', 
		'\x2', '\xF3', '\xF5', '\x5', '\b', '\x5', '\x2', '\xF4', '\xF0', '\x3', 
		'\x2', '\x2', '\x2', '\xF4', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF5', 
		'\xF6', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF4', '\x3', '\x2', '\x2', 
		'\x2', '\xF6', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF7', '!', '\x3', 
		'\x2', '\x2', '\x2', '\xF8', '\xFA', '\a', '\x3', '\x2', '\x2', '\xF9', 
		'\xF8', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFD', '\x3', '\x2', '\x2', 
		'\x2', '\xFB', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFC', '\x3', 
		'\x2', '\x2', '\x2', '\xFC', '\xFE', '\x3', '\x2', '\x2', '\x2', '\xFD', 
		'\xFB', '\x3', '\x2', '\x2', '\x2', '\xFE', '\x102', '\a', '\n', '\x2', 
		'\x2', '\xFF', '\x101', '\t', '\x4', '\x2', '\x2', '\x100', '\xFF', '\x3', 
		'\x2', '\x2', '\x2', '\x101', '\x104', '\x3', '\x2', '\x2', '\x2', '\x102', 
		'\x100', '\x3', '\x2', '\x2', '\x2', '\x102', '\x103', '\x3', '\x2', '\x2', 
		'\x2', '\x103', '#', '\x3', '\x2', '\x2', '\x2', '\x104', '\x102', '\x3', 
		'\x2', '\x2', '\x2', '\x105', '\x106', '\x5', '&', '\x14', '\x2', '\x106', 
		'%', '\x3', '\x2', '\x2', '\x2', '\x107', '\x109', '\x5', '*', '\x16', 
		'\x2', '\x108', '\x10A', '\x5', '(', '\x15', '\x2', '\x109', '\x108', 
		'\x3', '\x2', '\x2', '\x2', '\x109', '\x10A', '\x3', '\x2', '\x2', '\x2', 
		'\x10A', '\'', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10C', '\x5', 'L', 
		'\'', '\x2', '\x10C', '\x10D', '\x5', '\x6', '\x4', '\x2', '\x10D', '\x110', 
		'\x3', '\x2', '\x2', '\x2', '\x10E', '\x110', '\x5', '\b', '\x5', '\x2', 
		'\x10F', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x10E', '\x3', 
		'\x2', '\x2', '\x2', '\x110', '\x111', '\x3', '\x2', '\x2', '\x2', '\x111', 
		'\x10F', '\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\x3', '\x2', '\x2', 
		'\x2', '\x112', ')', '\x3', '\x2', '\x2', '\x2', '\x113', '\x115', '\a', 
		'\x3', '\x2', '\x2', '\x114', '\x113', '\x3', '\x2', '\x2', '\x2', '\x115', 
		'\x118', '\x3', '\x2', '\x2', '\x2', '\x116', '\x114', '\x3', '\x2', '\x2', 
		'\x2', '\x116', '\x117', '\x3', '\x2', '\x2', '\x2', '\x117', '\x119', 
		'\x3', '\x2', '\x2', '\x2', '\x118', '\x116', '\x3', '\x2', '\x2', '\x2', 
		'\x119', '\x11D', '\a', '\f', '\x2', '\x2', '\x11A', '\x11C', '\a', '\x3', 
		'\x2', '\x2', '\x11B', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11F', 
		'\x3', '\x2', '\x2', '\x2', '\x11D', '\x11B', '\x3', '\x2', '\x2', '\x2', 
		'\x11D', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x121', '\x3', 
		'\x2', '\x2', '\x2', '\x11F', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x120', 
		'\x122', '\x5', '\x30', '\x19', '\x2', '\x121', '\x120', '\x3', '\x2', 
		'\x2', '\x2', '\x121', '\x122', '\x3', '\x2', '\x2', '\x2', '\x122', '\x126', 
		'\x3', '\x2', '\x2', '\x2', '\x123', '\x125', '\a', '\x3', '\x2', '\x2', 
		'\x124', '\x123', '\x3', '\x2', '\x2', '\x2', '\x125', '\x128', '\x3', 
		'\x2', '\x2', '\x2', '\x126', '\x124', '\x3', '\x2', '\x2', '\x2', '\x126', 
		'\x127', '\x3', '\x2', '\x2', '\x2', '\x127', '\x12B', '\x3', '\x2', '\x2', 
		'\x2', '\x128', '\x126', '\x3', '\x2', '\x2', '\x2', '\x129', '\x12C', 
		'\x5', '\x38', '\x1D', '\x2', '\x12A', '\x12C', '\x5', ':', '\x1E', '\x2', 
		'\x12B', '\x129', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x12A', '\x3', 
		'\x2', '\x2', '\x2', '\x12B', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x12C', 
		'\x130', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12F', '\a', '\x3', '\x2', 
		'\x2', '\x12E', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x132', 
		'\x3', '\x2', '\x2', '\x2', '\x130', '\x12E', '\x3', '\x2', '\x2', '\x2', 
		'\x130', '\x131', '\x3', '\x2', '\x2', '\x2', '\x131', '\x134', '\x3', 
		'\x2', '\x2', '\x2', '\x132', '\x130', '\x3', '\x2', '\x2', '\x2', '\x133', 
		'\x135', '\x5', '\x32', '\x1A', '\x2', '\x134', '\x133', '\x3', '\x2', 
		'\x2', '\x2', '\x134', '\x135', '\x3', '\x2', '\x2', '\x2', '\x135', '\x139', 
		'\x3', '\x2', '\x2', '\x2', '\x136', '\x138', '\a', '\x3', '\x2', '\x2', 
		'\x137', '\x136', '\x3', '\x2', '\x2', '\x2', '\x138', '\x13B', '\x3', 
		'\x2', '\x2', '\x2', '\x139', '\x137', '\x3', '\x2', '\x2', '\x2', '\x139', 
		'\x13A', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x13D', '\x3', '\x2', '\x2', 
		'\x2', '\x13B', '\x139', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13E', 
		'\x5', '\x34', '\x1B', '\x2', '\x13D', '\x13C', '\x3', '\x2', '\x2', '\x2', 
		'\x13D', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x142', '\x3', 
		'\x2', '\x2', '\x2', '\x13F', '\x141', '\a', '\x3', '\x2', '\x2', '\x140', 
		'\x13F', '\x3', '\x2', '\x2', '\x2', '\x141', '\x144', '\x3', '\x2', '\x2', 
		'\x2', '\x142', '\x140', '\x3', '\x2', '\x2', '\x2', '\x142', '\x143', 
		'\x3', '\x2', '\x2', '\x2', '\x143', '\x146', '\x3', '\x2', '\x2', '\x2', 
		'\x144', '\x142', '\x3', '\x2', '\x2', '\x2', '\x145', '\x147', '\a', 
		'\x13', '\x2', '\x2', '\x146', '\x145', '\x3', '\x2', '\x2', '\x2', '\x146', 
		'\x147', '\x3', '\x2', '\x2', '\x2', '\x147', '\x14B', '\x3', '\x2', '\x2', 
		'\x2', '\x148', '\x14A', '\a', '\x3', '\x2', '\x2', '\x149', '\x148', 
		'\x3', '\x2', '\x2', '\x2', '\x14A', '\x14D', '\x3', '\x2', '\x2', '\x2', 
		'\x14B', '\x149', '\x3', '\x2', '\x2', '\x2', '\x14B', '\x14C', '\x3', 
		'\x2', '\x2', '\x2', '\x14C', '\x150', '\x3', '\x2', '\x2', '\x2', '\x14D', 
		'\x14B', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x151', '\x5', ',', '\x17', 
		'\x2', '\x14F', '\x151', '\x5', '.', '\x18', '\x2', '\x150', '\x14E', 
		'\x3', '\x2', '\x2', '\x2', '\x150', '\x14F', '\x3', '\x2', '\x2', '\x2', 
		'\x150', '\x151', '\x3', '\x2', '\x2', '\x2', '\x151', '\x152', '\x3', 
		'\x2', '\x2', '\x2', '\x152', '\x153', '\x5', '\x6', '\x4', '\x2', '\x153', 
		'+', '\x3', '\x2', '\x2', '\x2', '\x154', '\x155', '\a', '\x19', '\x2', 
		'\x2', '\x155', '-', '\x3', '\x2', '\x2', '\x2', '\x156', '\x157', '\a', 
		'\x1A', '\x2', '\x2', '\x157', '/', '\x3', '\x2', '\x2', '\x2', '\x158', 
		'\x159', '\a', '\x17', '\x2', '\x2', '\x159', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x15A', '\x15C', '\a', '\x15', '\x2', '\x2', '\x15B', '\x15A', 
		'\x3', '\x2', '\x2', '\x2', '\x15B', '\x15C', '\x3', '\x2', '\x2', '\x2', 
		'\x15C', '\x160', '\x3', '\x2', '\x2', '\x2', '\x15D', '\x15F', '\a', 
		'\x3', '\x2', '\x2', '\x15E', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x15F', 
		'\x162', '\x3', '\x2', '\x2', '\x2', '\x160', '\x15E', '\x3', '\x2', '\x2', 
		'\x2', '\x160', '\x161', '\x3', '\x2', '\x2', '\x2', '\x161', '\x163', 
		'\x3', '\x2', '\x2', '\x2', '\x162', '\x160', '\x3', '\x2', '\x2', '\x2', 
		'\x163', '\x164', '\x5', '\x36', '\x1C', '\x2', '\x164', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x165', '\x169', '\a', '\x16', '\x2', '\x2', '\x166', 
		'\x168', '\a', '\x3', '\x2', '\x2', '\x167', '\x166', '\x3', '\x2', '\x2', 
		'\x2', '\x168', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x169', '\x167', 
		'\x3', '\x2', '\x2', '\x2', '\x169', '\x16A', '\x3', '\x2', '\x2', '\x2', 
		'\x16A', '\x16C', '\x3', '\x2', '\x2', '\x2', '\x16B', '\x169', '\x3', 
		'\x2', '\x2', '\x2', '\x16C', '\x16D', '\x5', '\x36', '\x1C', '\x2', '\x16D', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x16E', '\x17F', '\t', '\x5', '\x2', 
		'\x2', '\x16F', '\x171', '\a', '\x3', '\x2', '\x2', '\x170', '\x16F', 
		'\x3', '\x2', '\x2', '\x2', '\x171', '\x174', '\x3', '\x2', '\x2', '\x2', 
		'\x172', '\x170', '\x3', '\x2', '\x2', '\x2', '\x172', '\x173', '\x3', 
		'\x2', '\x2', '\x2', '\x173', '\x175', '\x3', '\x2', '\x2', '\x2', '\x174', 
		'\x172', '\x3', '\x2', '\x2', '\x2', '\x175', '\x179', '\a', '\x14', '\x2', 
		'\x2', '\x176', '\x178', '\a', '\x3', '\x2', '\x2', '\x177', '\x176', 
		'\x3', '\x2', '\x2', '\x2', '\x178', '\x17B', '\x3', '\x2', '\x2', '\x2', 
		'\x179', '\x177', '\x3', '\x2', '\x2', '\x2', '\x179', '\x17A', '\x3', 
		'\x2', '\x2', '\x2', '\x17A', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x17B', 
		'\x179', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x17E', '\t', '\x5', '\x2', 
		'\x2', '\x17D', '\x172', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x181', 
		'\x3', '\x2', '\x2', '\x2', '\x17F', '\x17D', '\x3', '\x2', '\x2', '\x2', 
		'\x17F', '\x180', '\x3', '\x2', '\x2', '\x2', '\x180', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x181', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x182', 
		'\x18A', '\a', '\x1B', '\x2', '\x2', '\x183', '\x185', '\a', '\x3', '\x2', 
		'\x2', '\x184', '\x183', '\x3', '\x2', '\x2', '\x2', '\x185', '\x188', 
		'\x3', '\x2', '\x2', '\x2', '\x186', '\x184', '\x3', '\x2', '\x2', '\x2', 
		'\x186', '\x187', '\x3', '\x2', '\x2', '\x2', '\x187', '\x189', '\x3', 
		'\x2', '\x2', '\x2', '\x188', '\x186', '\x3', '\x2', '\x2', '\x2', '\x189', 
		'\x18B', '\a', '\x18', '\x2', '\x2', '\x18A', '\x186', '\x3', '\x2', '\x2', 
		'\x2', '\x18A', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\x18C', '\x194', '\a', '\x1C', '\x2', '\x2', 
		'\x18D', '\x18F', '\a', '\x3', '\x2', '\x2', '\x18E', '\x18D', '\x3', 
		'\x2', '\x2', '\x2', '\x18F', '\x192', '\x3', '\x2', '\x2', '\x2', '\x190', 
		'\x18E', '\x3', '\x2', '\x2', '\x2', '\x190', '\x191', '\x3', '\x2', '\x2', 
		'\x2', '\x191', '\x193', '\x3', '\x2', '\x2', '\x2', '\x192', '\x190', 
		'\x3', '\x2', '\x2', '\x2', '\x193', '\x195', '\a', '\x18', '\x2', '\x2', 
		'\x194', '\x190', '\x3', '\x2', '\x2', '\x2', '\x194', '\x195', '\x3', 
		'\x2', '\x2', '\x2', '\x195', ';', '\x3', '\x2', '\x2', '\x2', '\x196', 
		'\x197', '\x5', '>', ' ', '\x2', '\x197', '=', '\x3', '\x2', '\x2', '\x2', 
		'\x198', '\x19A', '\x5', '@', '!', '\x2', '\x199', '\x19B', '\x5', 'J', 
		'&', '\x2', '\x19A', '\x199', '\x3', '\x2', '\x2', '\x2', '\x19A', '\x19B', 
		'\x3', '\x2', '\x2', '\x2', '\x19B', '?', '\x3', '\x2', '\x2', '\x2', 
		'\x19C', '\x19E', '\a', '\x3', '\x2', '\x2', '\x19D', '\x19C', '\x3', 
		'\x2', '\x2', '\x2', '\x19E', '\x1A1', '\x3', '\x2', '\x2', '\x2', '\x19F', 
		'\x19D', '\x3', '\x2', '\x2', '\x2', '\x19F', '\x1A0', '\x3', '\x2', '\x2', 
		'\x2', '\x1A0', '\x1A2', '\x3', '\x2', '\x2', '\x2', '\x1A1', '\x19F', 
		'\x3', '\x2', '\x2', '\x2', '\x1A2', '\x1A4', '\a', '\v', '\x2', '\x2', 
		'\x1A3', '\x1A5', '\x5', '\x42', '\"', '\x2', '\x1A4', '\x1A3', '\x3', 
		'\x2', '\x2', '\x2', '\x1A4', '\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A5', 
		'\x1A7', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\x1A8', '\a', '\'', '\x2', 
		'\x2', '\x1A7', '\x1A6', '\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1A8', 
		'\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1AA', '\x3', '\x2', '\x2', '\x2', 
		'\x1A9', '\x1AB', '\x5', '\x44', '#', '\x2', '\x1AA', '\x1A9', '\x3', 
		'\x2', '\x2', '\x2', '\x1AA', '\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1AB', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1AE', '\t', '\x6', '\x2', 
		'\x2', '\x1AD', '\x1AC', '\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1AF', 
		'\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1AD', '\x3', '\x2', '\x2', '\x2', 
		'\x1AF', '\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1B0', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x1B1', '\x1B7', '\x5', '\x46', '$', '\x2', '\x1B2', 
		'\x1B7', '\x5', 'H', '%', '\x2', '\x1B3', '\x1B7', '\a', '&', '\x2', '\x2', 
		'\x1B4', '\x1B7', '\a', '\'', '\x2', '\x2', '\x1B5', '\x1B7', '\a', '\x3', 
		'\x2', '\x2', '\x1B6', '\x1B1', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1B2', 
		'\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1B3', '\x3', '\x2', '\x2', '\x2', 
		'\x1B6', '\x1B4', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1B5', '\x3', 
		'\x2', '\x2', '\x2', '\x1B7', '\x1B8', '\x3', '\x2', '\x2', '\x2', '\x1B8', 
		'\x1B6', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x1B9', '\x3', '\x2', '\x2', 
		'\x2', '\x1B9', '\x45', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1BB', 
		'\a', '$', '\x2', '\x2', '\x1BB', 'G', '\x3', '\x2', '\x2', '\x2', '\x1BC', 
		'\x1BD', '\a', '%', '\x2', '\x2', '\x1BD', 'I', '\x3', '\x2', '\x2', '\x2', 
		'\x1BE', '\x1BF', '\x5', 'L', '\'', '\x2', '\x1BF', '\x1C0', '\x5', '\x6', 
		'\x4', '\x2', '\x1C0', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1C3', 
		'\x5', '\b', '\x5', '\x2', '\x1C2', '\x1BE', '\x3', '\x2', '\x2', '\x2', 
		'\x1C2', '\x1C1', '\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1C4', '\x3', 
		'\x2', '\x2', '\x2', '\x1C4', '\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1C4', 
		'\x1C5', '\x3', '\x2', '\x2', '\x2', '\x1C5', 'K', '\x3', '\x2', '\x2', 
		'\x2', '\x1C6', '\x1C8', '\a', '\x3', '\x2', '\x2', '\x1C7', '\x1C6', 
		'\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1CB', '\x3', '\x2', '\x2', '\x2', 
		'\x1C9', '\x1C7', '\x3', '\x2', '\x2', '\x2', '\x1C9', '\x1CA', '\x3', 
		'\x2', '\x2', '\x2', '\x1CA', '\x1CC', '\x3', '\x2', '\x2', '\x2', '\x1CB', 
		'\x1C9', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\x1D0', '\a', '\n', '\x2', 
		'\x2', '\x1CD', '\x1CF', '\t', '\x4', '\x2', '\x2', '\x1CE', '\x1CD', 
		'\x3', '\x2', '\x2', '\x2', '\x1CF', '\x1D2', '\x3', '\x2', '\x2', '\x2', 
		'\x1D0', '\x1CE', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1D1', '\x3', 
		'\x2', '\x2', '\x2', '\x1D1', 'M', '\x3', '\x2', '\x2', '\x2', '\x1D2', 
		'\x1D0', '\x3', '\x2', '\x2', '\x2', '\x1D3', '\x1D4', '\x5', 'P', ')', 
		'\x2', '\x1D4', 'O', '\x3', '\x2', '\x2', '\x2', '\x1D5', '\x1D7', '\a', 
		'\x3', '\x2', '\x2', '\x1D6', '\x1D5', '\x3', '\x2', '\x2', '\x2', '\x1D7', 
		'\x1DA', '\x3', '\x2', '\x2', '\x2', '\x1D8', '\x1D6', '\x3', '\x2', '\x2', 
		'\x2', '\x1D8', '\x1D9', '\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1DB', 
		'\x3', '\x2', '\x2', '\x2', '\x1DA', '\x1D8', '\x3', '\x2', '\x2', '\x2', 
		'\x1DB', '\x1DF', '\a', '\r', '\x2', '\x2', '\x1DC', '\x1DE', '\a', '\x3', 
		'\x2', '\x2', '\x1DD', '\x1DC', '\x3', '\x2', '\x2', '\x2', '\x1DE', '\x1E1', 
		'\x3', '\x2', '\x2', '\x2', '\x1DF', '\x1DD', '\x3', '\x2', '\x2', '\x2', 
		'\x1DF', '\x1E0', '\x3', '\x2', '\x2', '\x2', '\x1E0', 'Q', '\x3', '\x2', 
		'\x2', '\x2', '\x1E1', '\x1DF', '\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1E3', 
		'\x5', 'T', '+', '\x2', '\x1E3', 'S', '\x3', '\x2', '\x2', '\x2', '\x1E4', 
		'\x1E6', '\x5', 'V', ',', '\x2', '\x1E5', '\x1E4', '\x3', '\x2', '\x2', 
		'\x2', '\x1E5', '\x1E6', '\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1E8', 
		'\x3', '\x2', '\x2', '\x2', '\x1E7', '\x1E9', '\x5', 'X', '-', '\x2', 
		'\x1E8', '\x1E7', '\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1E9', '\x3', 
		'\x2', '\x2', '\x2', '\x1E9', '\x1EA', '\x3', '\x2', '\x2', '\x2', '\x1EA', 
		'\x1EB', '\x5', 'Z', '.', '\x2', '\x1EB', '\x1EC', '\x5', '^', '\x30', 
		'\x2', '\x1EC', '\x1EE', '\x5', '\x64', '\x33', '\x2', '\x1ED', '\x1EF', 
		'\x5', 'h', '\x35', '\x2', '\x1EE', '\x1ED', '\x3', '\x2', '\x2', '\x2', 
		'\x1EE', '\x1EF', '\x3', '\x2', '\x2', '\x2', '\x1EF', 'U', '\x3', '\x2', 
		'\x2', '\x2', '\x1F0', '\x1F2', '\a', '\x3', '\x2', '\x2', '\x1F1', '\x1F0', 
		'\x3', '\x2', '\x2', '\x2', '\x1F2', '\x1F5', '\x3', '\x2', '\x2', '\x2', 
		'\x1F3', '\x1F1', '\x3', '\x2', '\x2', '\x2', '\x1F3', '\x1F4', '\x3', 
		'\x2', '\x2', '\x2', '\x1F4', '\x1F6', '\x3', '\x2', '\x2', '\x2', '\x1F5', 
		'\x1F3', '\x3', '\x2', '\x2', '\x2', '\x1F6', '\x1F7', '\a', '\x5', '\x2', 
		'\x2', '\x1F7', 'W', '\x3', '\x2', '\x2', '\x2', '\x1F8', '\x1FA', '\a', 
		'\x3', '\x2', '\x2', '\x1F9', '\x1F8', '\x3', '\x2', '\x2', '\x2', '\x1FA', 
		'\x1FD', '\x3', '\x2', '\x2', '\x2', '\x1FB', '\x1F9', '\x3', '\x2', '\x2', 
		'\x2', '\x1FB', '\x1FC', '\x3', '\x2', '\x2', '\x2', '\x1FC', '\x1FE', 
		'\x3', '\x2', '\x2', '\x2', '\x1FD', '\x1FB', '\x3', '\x2', '\x2', '\x2', 
		'\x1FE', '\x1FF', '\a', '\xF', '\x2', '\x2', '\x1FF', 'Y', '\x3', '\x2', 
		'\x2', '\x2', '\x200', '\x202', '\a', '\x3', '\x2', '\x2', '\x201', '\x200', 
		'\x3', '\x2', '\x2', '\x2', '\x202', '\x205', '\x3', '\x2', '\x2', '\x2', 
		'\x203', '\x201', '\x3', '\x2', '\x2', '\x2', '\x203', '\x204', '\x3', 
		'\x2', '\x2', '\x2', '\x204', '\x206', '\x3', '\x2', '\x2', '\x2', '\x205', 
		'\x203', '\x3', '\x2', '\x2', '\x2', '\x206', '\x207', '\a', '\b', '\x2', 
		'\x2', '\x207', '\x208', '\x5', '\\', '/', '\x2', '\x208', '[', '\x3', 
		'\x2', '\x2', '\x2', '\x209', '\x20B', '\a', ')', '\x2', '\x2', '\x20A', 
		'\x209', '\x3', '\x2', '\x2', '\x2', '\x20B', '\x20E', '\x3', '\x2', '\x2', 
		'\x2', '\x20C', '\x20A', '\x3', '\x2', '\x2', '\x2', '\x20C', '\x20D', 
		'\x3', '\x2', '\x2', '\x2', '\x20D', ']', '\x3', '\x2', '\x2', '\x2', 
		'\x20E', '\x20C', '\x3', '\x2', '\x2', '\x2', '\x20F', '\x211', '\a', 
		'\x3', '\x2', '\x2', '\x210', '\x20F', '\x3', '\x2', '\x2', '\x2', '\x211', 
		'\x214', '\x3', '\x2', '\x2', '\x2', '\x212', '\x210', '\x3', '\x2', '\x2', 
		'\x2', '\x212', '\x213', '\x3', '\x2', '\x2', '\x2', '\x213', '\x21B', 
		'\x3', '\x2', '\x2', '\x2', '\x214', '\x212', '\x3', '\x2', '\x2', '\x2', 
		'\x215', '\x216', '\x5', '`', '\x31', '\x2', '\x216', '\x217', '\x5', 
		'\x6', '\x4', '\x2', '\x217', '\x21A', '\x3', '\x2', '\x2', '\x2', '\x218', 
		'\x21A', '\x5', '\x62', '\x32', '\x2', '\x219', '\x215', '\x3', '\x2', 
		'\x2', '\x2', '\x219', '\x218', '\x3', '\x2', '\x2', '\x2', '\x21A', '\x21D', 
		'\x3', '\x2', '\x2', '\x2', '\x21B', '\x219', '\x3', '\x2', '\x2', '\x2', 
		'\x21B', '\x21C', '\x3', '\x2', '\x2', '\x2', '\x21C', '_', '\x3', '\x2', 
		'\x2', '\x2', '\x21D', '\x21B', '\x3', '\x2', '\x2', '\x2', '\x21E', '\x222', 
		'\a', '\n', '\x2', '\x2', '\x21F', '\x221', '\t', '\a', '\x2', '\x2', 
		'\x220', '\x21F', '\x3', '\x2', '\x2', '\x2', '\x221', '\x224', '\x3', 
		'\x2', '\x2', '\x2', '\x222', '\x220', '\x3', '\x2', '\x2', '\x2', '\x222', 
		'\x223', '\x3', '\x2', '\x2', '\x2', '\x223', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '\x224', '\x222', '\x3', '\x2', '\x2', '\x2', '\x225', '\x227', 
		'\t', '\x3', '\x2', '\x2', '\x226', '\x225', '\x3', '\x2', '\x2', '\x2', 
		'\x227', '\x228', '\x3', '\x2', '\x2', '\x2', '\x228', '\x226', '\x3', 
		'\x2', '\x2', '\x2', '\x228', '\x229', '\x3', '\x2', '\x2', '\x2', '\x229', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x22A', '\x22C', '\x5', '\x66', '\x34', 
		'\x2', '\x22B', '\x22A', '\x3', '\x2', '\x2', '\x2', '\x22B', '\x22C', 
		'\x3', '\x2', '\x2', '\x2', '\x22C', '\x22D', '\x3', '\x2', '\x2', '\x2', 
		'\x22D', '\x233', '\x5', 'n', '\x38', '\x2', '\x22E', '\x230', '\x5', 
		'n', '\x38', '\x2', '\x22F', '\x231', '\x5', '\x66', '\x34', '\x2', '\x230', 
		'\x22F', '\x3', '\x2', '\x2', '\x2', '\x230', '\x231', '\x3', '\x2', '\x2', 
		'\x2', '\x231', '\x233', '\x3', '\x2', '\x2', '\x2', '\x232', '\x22B', 
		'\x3', '\x2', '\x2', '\x2', '\x232', '\x22E', '\x3', '\x2', '\x2', '\x2', 
		'\x233', '\x65', '\x3', '\x2', '\x2', '\x2', '\x234', '\x236', '\a', '\x3', 
		'\x2', '\x2', '\x235', '\x234', '\x3', '\x2', '\x2', '\x2', '\x236', '\x239', 
		'\x3', '\x2', '\x2', '\x2', '\x237', '\x235', '\x3', '\x2', '\x2', '\x2', 
		'\x237', '\x238', '\x3', '\x2', '\x2', '\x2', '\x238', '\x23A', '\x3', 
		'\x2', '\x2', '\x2', '\x239', '\x237', '\x3', '\x2', '\x2', '\x2', '\x23A', 
		'\x23D', '\a', '\xE', '\x2', '\x2', '\x23B', '\x23E', '\x5', 'j', '\x36', 
		'\x2', '\x23C', '\x23E', '\x5', 'l', '\x37', '\x2', '\x23D', '\x23B', 
		'\x3', '\x2', '\x2', '\x2', '\x23D', '\x23C', '\x3', '\x2', '\x2', '\x2', 
		'\x23E', '\x23F', '\x3', '\x2', '\x2', '\x2', '\x23F', '\x23D', '\x3', 
		'\x2', '\x2', '\x2', '\x23F', '\x240', '\x3', '\x2', '\x2', '\x2', '\x240', 
		'g', '\x3', '\x2', '\x2', '\x2', '\x241', '\x243', '\a', '\x3', '\x2', 
		'\x2', '\x242', '\x241', '\x3', '\x2', '\x2', '\x2', '\x243', '\x246', 
		'\x3', '\x2', '\x2', '\x2', '\x244', '\x242', '\x3', '\x2', '\x2', '\x2', 
		'\x244', '\x245', '\x3', '\x2', '\x2', '\x2', '\x245', '\x247', '\x3', 
		'\x2', '\x2', '\x2', '\x246', '\x244', '\x3', '\x2', '\x2', '\x2', '\x247', 
		'\x24A', '\a', '\x11', '\x2', '\x2', '\x248', '\x24B', '\x5', 'j', '\x36', 
		'\x2', '\x249', '\x24B', '\x5', 'l', '\x37', '\x2', '\x24A', '\x248', 
		'\x3', '\x2', '\x2', '\x2', '\x24A', '\x249', '\x3', '\x2', '\x2', '\x2', 
		'\x24B', '\x24C', '\x3', '\x2', '\x2', '\x2', '\x24C', '\x24A', '\x3', 
		'\x2', '\x2', '\x2', '\x24C', '\x24D', '\x3', '\x2', '\x2', '\x2', '\x24D', 
		'i', '\x3', '\x2', '\x2', '\x2', '\x24E', '\x250', '\a', '\x3', '\x2', 
		'\x2', '\x24F', '\x24E', '\x3', '\x2', '\x2', '\x2', '\x250', '\x253', 
		'\x3', '\x2', '\x2', '\x2', '\x251', '\x24F', '\x3', '\x2', '\x2', '\x2', 
		'\x251', '\x252', '\x3', '\x2', '\x2', '\x2', '\x252', '\x254', '\x3', 
		'\x2', '\x2', '\x2', '\x253', '\x251', '\x3', '\x2', '\x2', '\x2', '\x254', 
		'\x258', '\a', '\n', '\x2', '\x2', '\x255', '\x257', '\t', '\a', '\x2', 
		'\x2', '\x256', '\x255', '\x3', '\x2', '\x2', '\x2', '\x257', '\x25A', 
		'\x3', '\x2', '\x2', '\x2', '\x258', '\x256', '\x3', '\x2', '\x2', '\x2', 
		'\x258', '\x259', '\x3', '\x2', '\x2', '\x2', '\x259', '\x25B', '\x3', 
		'\x2', '\x2', '\x2', '\x25A', '\x258', '\x3', '\x2', '\x2', '\x2', '\x25B', 
		'\x25C', '\x5', '\x6', '\x4', '\x2', '\x25C', 'k', '\x3', '\x2', '\x2', 
		'\x2', '\x25D', '\x25F', '\t', '\x3', '\x2', '\x2', '\x25E', '\x25D', 
		'\x3', '\x2', '\x2', '\x2', '\x25F', '\x260', '\x3', '\x2', '\x2', '\x2', 
		'\x260', '\x25E', '\x3', '\x2', '\x2', '\x2', '\x260', '\x261', '\x3', 
		'\x2', '\x2', '\x2', '\x261', 'm', '\x3', '\x2', '\x2', '\x2', '\x262', 
		'\x264', '\a', '\x3', '\x2', '\x2', '\x263', '\x262', '\x3', '\x2', '\x2', 
		'\x2', '\x264', '\x267', '\x3', '\x2', '\x2', '\x2', '\x265', '\x263', 
		'\x3', '\x2', '\x2', '\x2', '\x265', '\x266', '\x3', '\x2', '\x2', '\x2', 
		'\x266', '\x268', '\x3', '\x2', '\x2', '\x2', '\x267', '\x265', '\x3', 
		'\x2', '\x2', '\x2', '\x268', '\x269', '\a', '\x10', '\x2', '\x2', '\x269', 
		'o', '\x3', '\x2', '\x2', '\x2', '\x26A', '\x26B', '\x5', 'r', ':', '\x2', 
		'\x26B', 'q', '\x3', '\x2', '\x2', '\x2', '\x26C', '\x26E', '\a', '\x3', 
		'\x2', '\x2', '\x26D', '\x26C', '\x3', '\x2', '\x2', '\x2', '\x26E', '\x271', 
		'\x3', '\x2', '\x2', '\x2', '\x26F', '\x26D', '\x3', '\x2', '\x2', '\x2', 
		'\x26F', '\x270', '\x3', '\x2', '\x2', '\x2', '\x270', '\x272', '\x3', 
		'\x2', '\x2', '\x2', '\x271', '\x26F', '\x3', '\x2', '\x2', '\x2', '\x272', 
		'\x273', '\a', '\x6', '\x2', '\x2', '\x273', 's', '\x3', '\x2', '\x2', 
		'\x2', '[', 'w', '\x83', '\x88', '\x90', '\x98', '\x9F', '\xA7', '\xA9', 
		'\xB1', '\xB7', '\xBC', '\xC6', '\xCB', '\xD0', '\xD5', '\xDD', '\xDF', 
		'\xE5', '\xED', '\xF4', '\xF6', '\xFB', '\x102', '\x109', '\x10F', '\x111', 
		'\x116', '\x11D', '\x121', '\x126', '\x12B', '\x130', '\x134', '\x139', 
		'\x13D', '\x142', '\x146', '\x14B', '\x150', '\x15B', '\x160', '\x169', 
		'\x172', '\x179', '\x17F', '\x186', '\x18A', '\x190', '\x194', '\x19A', 
		'\x19F', '\x1A4', '\x1A7', '\x1AA', '\x1AF', '\x1B6', '\x1B8', '\x1C2', 
		'\x1C4', '\x1C9', '\x1D0', '\x1D8', '\x1DF', '\x1E5', '\x1E8', '\x1EE', 
		'\x1F3', '\x1FB', '\x203', '\x20C', '\x212', '\x219', '\x21B', '\x222', 
		'\x228', '\x22B', '\x230', '\x232', '\x237', '\x23D', '\x23F', '\x244', 
		'\x24A', '\x24C', '\x251', '\x258', '\x260', '\x265', '\x26F',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
